#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å PostgreSQL
"""

import asyncio
import asyncpg
import logging
import sys
from datetime import datetime
from config import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class DatabaseRecovery:
    def __init__(self):
        self.pool = None

    async def test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL"""
        try:
            logger.info("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å PostgreSQL...")
            conn = await asyncpg.connect(
                host=config.DB_HOST,
                port=config.DB_PORT,
                database=config.DB_NAME,
                user=config.DB_USER,
                password=config.DB_PASSWORD,
                timeout=10
            )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
            result = await conn.fetchval("SELECT version()")
            logger.info(f"‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –í–µ—Ä—Å–∏—è PostgreSQL: {result}")
            
            await conn.close()
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False

    async def test_pool_connection(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—É–ª"""
        try:
            logger.info("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
            self.pool = await asyncpg.create_pool(
                host=config.DB_HOST,
                port=config.DB_PORT,
                database=config.DB_NAME,
                user=config.DB_USER,
                password=config.DB_PASSWORD,
                min_size=1,
                max_size=5,
                command_timeout=30
            )
            
            async with self.pool.acquire() as conn:
                result = await conn.fetchval("SELECT current_timestamp")
                logger.info(f"‚úÖ –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç! –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {result}")
            
            await self.pool.close()
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {e}")
            return False

    async def check_database_status(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            conn = await asyncpg.connect(
                host=config.DB_HOST,
                port=config.DB_PORT,
                database=config.DB_NAME,
                user=config.DB_USER,
                password=config.DB_PASSWORD,
                timeout=10
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            active_connections = await conn.fetchval(
                "SELECT count(*) FROM pg_stat_activity WHERE state = 'active'"
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            blocked_queries = await conn.fetchval(
                "SELECT count(*) FROM pg_stat_activity WHERE wait_event_type = 'Lock'"
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db_size = await conn.fetchval(
                "SELECT pg_size_pretty(pg_database_size(current_database()))"
            )
            
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
            logger.info(f"   - –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {active_connections}")
            logger.info(f"   - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {blocked_queries}")
            logger.info(f"   - –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_size}")
            
            await conn.close()
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return False

    async def check_tables(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü"""
        try:
            logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü...")
            conn = await asyncpg.connect(
                host=config.DB_HOST,
                port=config.DB_PORT,
                database=config.DB_NAME,
                user=config.DB_USER,
                password=config.DB_PASSWORD,
                timeout=10
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É users
            users_exists = await conn.fetchval(
                "SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'users')"
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É orders
            orders_exists = await conn.fetchval(
                "SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'orders')"
            )
            
            if users_exists:
                users_count = await conn.fetchval("SELECT count(*) FROM users")
                logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–ø–∏—Å–µ–π: {users_count}")
            else:
                logger.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ users –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            if orders_exists:
                orders_count = await conn.fetchval("SELECT count(*) FROM orders")
                logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ orders —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–ø–∏—Å–µ–π: {orders_count}")
            else:
                logger.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ orders –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            await conn.close()
            return users_exists and orders_exists
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü: {e}")
            return False

    async def recreate_tables(self):
        """–ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã (–û–°–¢–û–†–û–ñ–ù–û!)"""
        try:
            logger.warning("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –ø–æ—Ç–µ—Ä–µ –¥–∞–Ω–Ω—ã—Ö!")
            response = input("–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í–≤–µ–¥–∏—Ç–µ 'yes' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ")
            
            if response.lower() != 'yes':
                logger.info("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return False
            
            logger.info("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
            conn = await asyncpg.connect(
                host=config.DB_HOST,
                port=config.DB_PORT,
                database=config.DB_NAME,
                user=config.DB_USER,
                password=config.DB_PASSWORD,
                timeout=30
            )
            
            # –£–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            await conn.execute("DROP TABLE IF EXISTS orders CASCADE")
            await conn.execute("DROP TABLE IF EXISTS users CASCADE")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –∑–∞–Ω–æ–≤–æ
            await conn.execute("""
                CREATE TABLE users (
                    id SERIAL PRIMARY KEY,
                    tg_id BIGINT UNIQUE NOT NULL,
                    name VARCHAR(255) NOT NULL,
                    profession VARCHAR(20) DEFAULT 'painter',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            await conn.execute("""
                CREATE TABLE orders (
                    id SERIAL PRIMARY KEY,
                    order_number VARCHAR(50) NOT NULL,
                    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                    set_type VARCHAR(20) NOT NULL,
                    size VARCHAR(10),
                    alumochrome BOOLEAN DEFAULT FALSE,
                    suspensia_type VARCHAR(20),
                    quantity INTEGER DEFAULT 1,
                    spraying_deep INTEGER DEFAULT 0,
                    spraying_shallow INTEGER DEFAULT 0,
                    price INTEGER NOT NULL,
                    status VARCHAR(20) DEFAULT 'draft',
                    photo_file_id VARCHAR(255),
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
            await conn.execute("CREATE INDEX IF NOT EXISTS idx_orders_user_id ON orders(user_id)")
            await conn.execute("CREATE INDEX IF NOT EXISTS idx_orders_status ON orders(status)")
            await conn.execute("CREATE INDEX IF NOT EXISTS idx_orders_created_at ON orders(created_at)")
            
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã")
            await conn.close()
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
            return False

    async def kill_idle_connections(self):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Å—Ç–∞–∏–≤–∞—é—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–∞–∏–≤–∞—é—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
            conn = await asyncpg.connect(
                host=config.DB_HOST,
                port=config.DB_PORT,
                database=config.DB_NAME,
                user=config.DB_USER,
                password=config.DB_PASSWORD,
                timeout=10
            )
            
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Å—Ç–∞–∏–≤–∞—é—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ)
            idle_connections = await conn.fetch("""
                SELECT pid, state, query_start, state_change, query
                FROM pg_stat_activity 
                WHERE state = 'idle' 
                AND pid != pg_backend_pid()
                AND state_change < now() - interval '5 minutes'
            """)
            
            if idle_connections:
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(idle_connections)} –ø—Ä–æ—Å—Ç–∞–∏–≤–∞—é—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
                for conn_info in idle_connections:
                    try:
                        await conn.execute(f"SELECT pg_terminate_backend({conn_info['pid']})")
                        logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ PID {conn_info['pid']}")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å PID {conn_info['pid']}: {e}")
            else:
                logger.info("‚úÖ –ü—Ä–æ—Å—Ç–∞–∏–≤–∞—é—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            await conn.close()
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {e}")
            return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
    recovery = DatabaseRecovery()
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    logger.info(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
    logger.info(f"   - –•–æ—Å—Ç: {config.DB_HOST}:{config.DB_PORT}")
    logger.info(f"   - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {config.DB_NAME}")
    logger.info(f"   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {config.DB_USER}")
    logger.info("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if not await recovery.test_connection():
        logger.error("‚ùå –ë–∞–∑–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    if not await recovery.test_pool_connection():
        logger.error("‚ùå –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await recovery.check_database_status()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
    tables_ok = await recovery.check_tables()
    
    if not tables_ok:
        logger.warning("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
        response = input("–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã? (yes/no): ")
        if response.lower() == 'yes':
            await recovery.recreate_tables()
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Å—Ç–∞–∏–≤–∞—é—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    await recovery.kill_idle_connections()
    
    logger.info("‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
