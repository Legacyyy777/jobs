import logging
import re
from datetime import datetime
from zoneinfo import ZoneInfo
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from handlers.fsm import EditOrderStates
from keyboards import (
    get_edit_orders_keyboard,
    get_my_orders_keyboard,
    get_order_actions_keyboard,
    get_status_keyboard,
    get_confirm_delete_keyboard,
    get_back_to_menu_keyboard,
    get_cancel_keyboard
)
from config import config
from db import db

router = Router()

async def safe_edit_message(callback: CallbackQuery, text: str, keyboard: InlineKeyboardMarkup = None, parse_mode: str = "HTML"):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
    current_text = callback.message.text or ""
    current_markup = callback.message.reply_markup
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç—ã (—É–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
    current_text_clean = re.sub(r'<[^>]+>', '', current_text).strip()
    new_text_clean = re.sub(r'<[^>]+>', '', text).strip()
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if current_text_clean != new_text_clean or current_markup != keyboard:
        try:
            await callback.message.edit_text(
                text,
                parse_mode=parse_mode,
                reply_markup=keyboard
            )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å),
            # –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –±–µ–∑ –æ—à–∏–±–∫–∏
            logging.warning(f"Failed to edit message: {e}")
    # –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

async def format_order_info(order: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"""
    profession = order.get('profession', 'painter')
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–∫–∞–∑–∞
    if order['set_type'] == 'single':
        set_type_text = "–æ–¥–∏–Ω –¥–∏—Å–∫"
    elif order['set_type'] == 'set':
        set_type_text = "–∫–æ–º–ø–ª–µ–∫—Ç"
    elif order['set_type'] == 'nakidka':
        set_type_text = "–Ω–∞—Å–∞–¥–∫–∏"
    elif order['set_type'] == 'suspensia':
        set_type_text = "—Å—É–ø–æ—Ä—Ç–∞"
    elif order['set_type'] == 'free':
        set_type_text = "—Å–≤–æ–±–æ–¥–Ω—ã–π –∑–∞–∫–∞–∑"
    elif order['set_type'].startswith('70_30_'):
        disk_type = order['set_type'].split('_')[2]  # single –∏–ª–∏ set
        if disk_type == 'single':
            quantity = order.get('disk_quantity', 1)
            set_type_text = f"70/30 –æ–¥–∏–Ω –¥–∏—Å–∫ ({quantity} —à—Ç.)"
        else:
            set_type_text = "70/30 –∫–æ–º–ø–ª–µ–∫—Ç"
    else:
        set_type_text = order['set_type']
    
    status_emoji = {
        'draft': 'üìù',
        'confirmed': '‚úÖ',
        'rejected': '‚ùå'
    }
    
    status_text = {
        'draft': '–ß–µ—Ä–Ω–æ–≤–∏–∫',
        'confirmed': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
        'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω'
    }
    
    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    text = (
        f"üÜî <b>ID:</b> {order['id']}\n"
        f"üìã <b>–ù–æ–º–µ—Ä:</b> {order['order_number']}\n"
        f"üîπ <b>–¢–∏–ø:</b> {set_type_text}\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∏—Å–∫–æ–≤
    if order['set_type'] in ['single', 'set'] or order['set_type'].startswith('70_30_'):
        if order['size']:
            text += f"üìè <b>–†–∞–∑–º–µ—Ä:</b> {order['size']}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
    if profession == "painter":
        # –î–ª—è –º–∞–ª—è—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ª—é–º–æ—Ö—Ä–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∏—Å–∫–æ–≤)
        if order['set_type'] in ['single', 'set'] or order['set_type'].startswith('70_30_'):
            alumochrome_text = "–î–∞" if order['alumochrome'] else "–ù–µ—Ç"
            text += f"‚ú® <b>–ê–ª—é–º–æ—Ö—Ä–æ–º:</b> {alumochrome_text}\n"
            
            # –î–ª—è —Ç–∏–ø–∞ 70/30 –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞
            if order['set_type'].startswith('70_30_'):
                painter_70_id = order.get('painter_70_id')
                painter_30_id = order.get('painter_30_id')
                if painter_70_id and painter_30_id:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –º–∞–ª—è—Ä–æ–≤
                    painter_70_name = await db.get_user_name_by_id(painter_70_id)
                    painter_30_name = await db.get_user_name_by_id(painter_30_id)
                    total_price = order.get('price', 0)
                    price_70 = int(total_price * 0.7)
                    price_30 = int(total_price * 0.3)
                    text += f"üé® <b>–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞:</b>\n"
                    text += f"   ‚Ä¢ {painter_70_name}: {price_70:,} —Ä—É–±. (70%)\n"
                    text += f"   ‚Ä¢ {painter_30_name}: {price_30:,} —Ä—É–±. (30%)\n"
        
        # –î–ª—è —Å—É–ø–æ—Ä—Ç–æ–≤ –º–∞–ª—è—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø
        elif order['set_type'] == 'suspensia':
            suspensia_type = order.get('suspensia_type', 'paint')
            if suspensia_type == 'logo':
                text += f"üé® <b>–¢–∏–ø:</b> —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º\n"
            else:
                text += f"üé® <b>–¢–∏–ø:</b> –ø–æ–∫—Ä–∞—Å–∫–∞\n"
            
            quantity = order.get('quantity', 1)
            if quantity > 1:
                text += f"üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity} —à—Ç.\n"
    
    else:  # sandblaster
        # –î–ª—è –ø–µ—Å–∫–æ—Å—Ç—Ä—É–π—â–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–ø—ã–ª–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∏—Å–∫–æ–≤)
        if order['set_type'] in ['single', 'set']:
            spraying_deep = order.get('spraying_deep', 0)
            spraying_shallow = order.get('spraying_shallow', 0)
            
            if spraying_deep > 0 or spraying_shallow > 0:
                text += f"üí® <b>–ù–∞–ø—ã–ª–µ–Ω–∏–µ:</b>"
                if spraying_deep > 0:
                    text += f" –≥–ª—É–±–æ–∫–∏—Ö: {spraying_deep}"
                if spraying_shallow > 0:
                    text += f" –Ω–µ–≥–ª—É–±–æ–∫–∏—Ö: {spraying_shallow}"
                text += "\n"
        
        # –î–ª—è —Å—É–ø–æ—Ä—Ç–æ–≤ –ø–µ—Å–∫–æ—Å—Ç—Ä—É–π—â–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        elif order['set_type'] == 'suspensia':
            quantity = order.get('quantity', 1)
            if quantity > 1:
                text += f"üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity} —à—Ç.\n"
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∏–∑ UTC –≤ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –£—Ñ—ã
    tz_ufa = ZoneInfo("Asia/Yekaterinburg")
    created_at_utc = order['created_at']
    
    # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –≤ UTC, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –£—Ñ—É
    if created_at_utc.tzinfo is None:
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è naive (–±–µ–∑ timezone), —Å—á–∏—Ç–∞–µ–º –µ–≥–æ UTC
        created_at_utc = created_at_utc.replace(tzinfo=ZoneInfo("UTC"))
    
    created_at_ufa = created_at_utc.astimezone(tz_ufa)
    
    text += (
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {order['price']:,} —Ä—É–±.\n"
        f"{status_emoji.get(order['status'], '‚ùì')} <b>–°—Ç–∞—Ç—É—Å:</b> {status_text.get(order['status'], order['status'])}\n"
        f"üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {created_at_ufa.strftime('%d.%m.%Y %H:%M')}"
    )
    
    return text

@router.callback_query(F.data == "edit_orders")
async def show_edit_orders_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤"""
    await state.clear()
    
    text = "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    keyboard = get_edit_orders_keyboard()
    
    await safe_edit_message(callback, text, keyboard)
    await callback.answer()

@router.callback_query(F.data == "my_orders")
async def show_my_orders(callback: CallbackQuery, page: int = 0):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = await db.get_or_create_user(
        callback.from_user.id,
        callback.from_user.full_name or callback.from_user.username or "Unknown"
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    orders = await db.get_user_orders_paginated(user_id, limit=5, offset=page * 5)
    total_count = await db.get_user_orders_total_count(user_id)
    
    if not orders:
        text = "üìã <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã</b>\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤."
        keyboard = get_edit_orders_keyboard()
    else:
        text = f"üìã <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã (—Å—Ç—Ä. {page + 1}):</b>\n\n"
        for i, order in enumerate(orders, 1):
            text += f"{i}. {await format_order_info(order)}\n\n"
        text = text[:4000]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        keyboard = get_my_orders_keyboard(orders, page, total_count)
    
    await safe_edit_message(callback, text, keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("my_orders_page_"))
async def show_my_orders_page(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    page = int(callback.data.split("_")[3])  # my_orders_page_{page}
    
    user_id = await db.get_or_create_user(
        callback.from_user.id,
        callback.from_user.full_name or callback.from_user.username or "Unknown"
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    orders = await db.get_user_orders_paginated(user_id, limit=5, offset=page * 5)
    total_count = await db.get_user_orders_total_count(user_id)
    
    if not orders:
        text = "üìã <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã</b>\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤."
        keyboard = get_edit_orders_keyboard()
    else:
        text = f"üìã <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã (—Å—Ç—Ä. {page + 1}):</b>\n\n"
        for i, order in enumerate(orders, 1):
            text += f"{i}. {await format_order_info(order)}\n\n"
        text = text[:4000]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        keyboard = get_my_orders_keyboard(orders, page, total_count)
    
    await safe_edit_message(callback, text, keyboard)
    await callback.answer()

@router.callback_query(F.data == "find_order")
async def start_find_order(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞ –ø–æ –Ω–æ–º–µ—Ä—É"""
    text = "üîç <b>–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:"
    keyboard = get_cancel_keyboard()
    
    await safe_edit_message(callback, text, keyboard)
    await state.set_state(EditOrderStates.waiting_for_order_number)
    await callback.answer()

@router.message(StateFilter(EditOrderStates.waiting_for_order_number))
async def process_find_order_number(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    if not message.text:
        await message.answer("‚ùå –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    order_number = message.text.strip()
    
    if not order_number:
        await message.answer("‚ùå –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = await db.get_or_create_user(
        message.from_user.id,
        message.from_user.full_name or message.from_user.username or "Unknown"
    )
    
    # –ò—â–µ–º –∑–∞–∫–∞–∑ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–∏ –∑–∞–∫–∞–∑–æ–≤ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    order = await db.get_user_order_by_number(user_id, order_number)
    
    if not order:
        await message.answer(
            f"‚ùå <b>–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>\n\n"
            f"–ó–∞–∫–∞–∑ —Å –Ω–æ–º–µ—Ä–æ–º '{order_number}' –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤.\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode="HTML",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    await message.answer(
        f"‚úÖ <b>–ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω!</b>\n\n{format_order_info(order)}",
        parse_mode="HTML",
        reply_markup=get_order_actions_keyboard(order['id'])
    )
    
    await state.clear()

@router.callback_query(F.data.startswith("order_actions_"))
async def show_order_actions(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–∫–∞–∑–æ–º"""
    order_id = int(callback.data.split("_")[2])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_id = await db.get_or_create_user(
        callback.from_user.id,
        callback.from_user.full_name or callback.from_user.username or "Unknown"
    )
    
    order = await db.get_user_order_by_id(user_id, order_id)
    
    if not order:
        text = "‚ùå <b>–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>\n\n–ó–∞–∫–∞–∑ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º."
        keyboard = get_edit_orders_keyboard()
        
        await safe_edit_message(callback, text, keyboard)
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    text = f"üìã <b>–î–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–∫–∞–∑–æ–º</b>\n\n{await format_order_info(order)}"
    keyboard = get_order_actions_keyboard(order_id)
    
    await safe_edit_message(callback, text, keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("change_status_"))
async def start_change_status(callback: CallbackQuery):
    """–ù–∞—á–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    order_id = int(callback.data.split("_")[2])
    
    text = "‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:"
    keyboard = get_status_keyboard(order_id)
    
    await safe_edit_message(callback, text, keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("set_status_"))
async def process_change_status(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    parts = callback.data.split("_")
    order_id = int(parts[2])
    new_status = parts[3]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_id = await db.get_or_create_user(
        callback.from_user.id,
        callback.from_user.full_name or callback.from_user.username or "Unknown"
    )
    
    order = await db.get_user_order_by_id(user_id, order_id)
    
    if not order:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    await db.update_order_status(order_id, new_status)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    updated_order = await db.get_user_order_by_id(user_id, order_id)
    
    text = f"‚úÖ <b>–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n{format_order_info(updated_order)}"
    keyboard = get_order_actions_keyboard(order_id)
    
    await safe_edit_message(callback, text, keyboard)
    await callback.answer("‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω")

@router.callback_query(F.data.startswith("change_price_"))
async def start_change_price(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞–∫–∞–∑–∞"""
    order_id = int(callback.data.split("_")[2])
    
    await state.update_data(order_id=order_id)
    
    text = "üí∞ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞–∫–∞–∑–∞</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö:"
    keyboard = get_cancel_keyboard()
    
    await safe_edit_message(callback, text, keyboard)
    await state.set_state(EditOrderStates.waiting_for_new_price)
    await callback.answer()

@router.message(StateFilter(EditOrderStates.waiting_for_new_price))
async def process_change_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –∑–∞–∫–∞–∑–∞"""
    if not message.text:
        await message.answer("‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    data = await state.get_data()
    order_id = data["order_id"]
    
    try:
        new_price = int(message.text.strip())
        
        if new_price <= 0:
            await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_id = await db.get_or_create_user(
            message.from_user.id,
            message.from_user.full_name or message.from_user.username or "Unknown"
        )
        
        order = await db.get_user_order_by_id(user_id, order_id)
        
        if not order:
            await message.answer(
                "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                reply_markup=get_edit_orders_keyboard()
            )
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
        success = await db.update_order_price(order_id, new_price)
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
            updated_order = await db.get_user_order_by_id(user_id, order_id)
            
            await message.answer(
                f"‚úÖ <b>–¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n{format_order_info(updated_order)}",
                parse_mode="HTML",
                reply_markup=get_order_actions_keyboard(order_id)
            )
        else:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã!</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="HTML",
                reply_markup=get_order_actions_keyboard(order_id)
            )
    
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return
    
    await state.clear()

@router.callback_query(F.data.startswith("delete_order_"))
async def start_delete_order(callback: CallbackQuery):
    """–ù–∞—á–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    order_id = int(callback.data.split("_")[2])
    
    text = ("üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
            "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n\n"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑?")
    keyboard = get_confirm_delete_keyboard(order_id)
    
    await safe_edit_message(callback, text, keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("confirm_delete_"))
async def process_delete_order(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    order_id = int(callback.data.split("_")[2])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_id = await db.get_or_create_user(
        callback.from_user.id,
        callback.from_user.full_name or callback.from_user.username or "Unknown"
    )
    
    order = await db.get_user_order_by_id(user_id, order_id)
    
    if not order:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑
    success = await db.delete_order_by_id(order_id)
    
    if success:
        text = (f"‚úÖ <b>–ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω!</b>\n\n"
                f"–ó–∞–∫–∞–∑ #{order_id} (–Ω–æ–º–µ—Ä: {order['order_number']}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
        keyboard = get_edit_orders_keyboard()
        
        await safe_edit_message(callback, text, keyboard)
        await callback.answer("‚úÖ –ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω")
    else:
        text = ("‚ùå <b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞!</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        keyboard = get_order_actions_keyboard(order_id)
        
        await safe_edit_message(callback, text, keyboard)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
