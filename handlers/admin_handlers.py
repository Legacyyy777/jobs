import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
# –£–±—Ä–∞–ª–∏ –∏–º–ø–æ—Ä—Ç Command - —Ç–µ–ø–µ—Ä—å –≤—Å–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏

from config import config
from db import db
from keyboards import get_admin_order_keyboard

router = Router()

async def is_moderator(user_id: int, chat_id: int, bot) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –≤ —á–∞—Ç–µ"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞
        if user_id == config.ADMIN_CHAT_ID:
            return True
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –≤ —á–∞—Ç–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        if config.MODERATION_CHAT_ID:
            chat_member = await bot.get_chat_member(chat_id, user_id)
            return chat_member.status in ['administrator', 'creator']
        
        return False
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False

@router.callback_query(F.data.startswith("admin_confirm_"))
async def admin_confirm_order(callback: CallbackQuery):
    """–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–∫–∞–∑"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    if not await is_moderator(callback.from_user.id, callback.message.chat.id, callback.bot):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤", show_alert=True)
        return
    
    order_number = callback.data.split("_", 2)[2]  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –ø–æ –Ω–æ–º–µ—Ä—É
    order = await db.get_order_by_number(order_number)
    if not order:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    await db.update_order_status(order['id'], "confirmed")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–∞–ª—è—Ä–∞ –∏–ª–∏ –ø–µ—Å–∫–æ—Å—Ç—Ä—É–π—â–∏–∫–∞)
    try:
        profession_text = "üé® –ú–∞–ª—è—Ä" if order.get('profession') == 'painter' else "üí® –ü–µ—Å–∫–æ—Å—Ç—Ä—É–π—â–∏–∫"
        await callback.bot.send_message(
            chat_id=order["tg_id"],
            text=f"‚úÖ <b>–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>\n\n"
                 f"üìã –ù–æ–º–µ—Ä: {order['order_number']}\n"
                 f"üí∞ –°—É–º–º–∞: {order['price']:,} —Ä—É–±.\n\n"
                 f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É!",
            parse_mode="HTML"
        )
        logging.info(f"‚úÖ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û–¢–ü–†–ê–í–õ–ï–ù–û | {profession_text} | ID: {order['tg_id']} | ‚Ññ{order['order_number']} | {order['price']}‚ÇΩ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await callback.message.edit_caption(
        caption=f"‚úÖ <b>–ó–ê–ö–ê–ó –ü–û–î–¢–í–ï–†–ñ–î–ï–ù</b>\n\n"
                f"üë§ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> @{order['user_name']}\n"
                f"üìã <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {order['order_number']}\n"
                f"üîπ <b>–¢–∏–ø:</b> {'–æ–¥–∏–Ω –¥–∏—Å–∫' if order['set_type'] == 'single' else '–∫–æ–º–ø–ª–µ–∫—Ç'}\n"
                f"üìè <b>–†–∞–∑–º–µ—Ä:</b> {order['size']}\n"
                f"‚ú® <b>–ê–ª—é–º–æ—Ö—Ä–æ–º:</b> {'–î–∞' if order['alumochrome'] else '–ù–µ—Ç'}\n"
                f"üí∞ <b>–¶–µ–Ω–∞:</b> {order['price']:,} —Ä—É–±.",
        parse_mode="HTML"
    )
    
    await callback.answer("‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")

@router.callback_query(F.data.startswith("admin_reject_"))
async def admin_reject_order(callback: CallbackQuery):
    """–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞–∫–∞–∑"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    if not await is_moderator(callback.from_user.id, callback.message.chat.id, callback.bot):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤", show_alert=True)
        return
    
    order_number = callback.data.split("_", 2)[2]  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –ø–æ –Ω–æ–º–µ—Ä—É
    order = await db.get_order_by_number(order_number)
    if not order:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    await db.update_order_status(order['id'], "rejected")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–∞–ª—è—Ä–∞ –∏–ª–∏ –ø–µ—Å–∫–æ—Å—Ç—Ä—É–π—â–∏–∫–∞)
    try:
        profession_text = "üé® –ú–∞–ª—è—Ä" if order.get('profession') == 'painter' else "üí® –ü–µ—Å–∫–æ—Å—Ç—Ä—É–π—â–∏–∫"
        await callback.bot.send_message(
            chat_id=order["tg_id"],
            text=f"‚ùå <b>–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>\n\n"
                 f"üìã –ù–æ–º–µ—Ä: {order['order_number']}\n\n"
                 f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
            parse_mode="HTML"
        )
        logging.info(f"‚ùå –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û–ë –û–¢–ö–õ–û–ù–ï–ù–ò–ò | {profession_text} | ID: {order['tg_id']} | ‚Ññ{order['order_number']}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {e}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await callback.message.edit_caption(
        caption=f"‚ùå <b>–ó–ê–ö–ê–ó –û–¢–ö–õ–û–ù–ï–ù</b>\n\n"
                f"üë§ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> @{order['user_name']}\n"
                f"üìã <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {order['order_number']}\n"
                f"üîπ <b>–¢–∏–ø:</b> {'–æ–¥–∏–Ω –¥–∏—Å–∫' if order['set_type'] == 'single' else '–∫–æ–º–ø–ª–µ–∫—Ç'}\n"
                f"üìè <b>–†–∞–∑–º–µ—Ä:</b> {order['size']}\n"
                f"‚ú® <b>–ê–ª—é–º–æ—Ö—Ä–æ–º:</b> {'–î–∞' if order['alumochrome'] else '–ù–µ—Ç'}\n"
                f"üí∞ <b>–¶–µ–Ω–∞:</b> {order['price']:,} —Ä—É–±.",
        parse_mode="HTML"
    )
    
    await callback.answer("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω")

@router.callback_query(F.data.startswith("admin_edit_"))
async def admin_edit_order(callback: CallbackQuery):
    """–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —Ö–æ—á–µ—Ç –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    if not await is_moderator(callback.from_user.id, callback.message.chat.id, callback.bot):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤", show_alert=True)
        return
    
    order_number = callback.data.split("_", 2)[2]  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –ø–æ –Ω–æ–º–µ—Ä—É
    order = await db.get_order_by_number(order_number)
    if not order:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    try:
        profession_text = "üé® –ú–∞–ª—è—Ä" if order.get('profession') == 'painter' else "üí® –ü–µ—Å–∫–æ—Å—Ç—Ä—É–π—â–∏–∫"
        await callback.bot.send_message(
            chat_id=order["tg_id"],
            text=f"‚úèÔ∏è <b>–ó–∞–∫–∞–∑ —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>\n\n"
                 f"üìã –ù–æ–º–µ—Ä: {order['order_number']}\n\n"
                 f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.\n"
                 f"–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–∏—Å–∫–∞(–æ–≤).",
            parse_mode="HTML"
        )
        logging.info(f"‚úèÔ∏è –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ò | {profession_text} | ID: {order['tg_id']} | ‚Ññ{order['order_number']}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
    
    await callback.answer("‚úèÔ∏è –ú–∞–ª—è—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

# –£–±—Ä–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É /stats - —Ç–µ–ø–µ—Ä—å –≤—Å–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
