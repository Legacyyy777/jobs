import logging
import re
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, PhotoSize, InlineKeyboardMarkup
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state

from handlers.fsm import OrderStates
from keyboards import (
    get_main_menu_keyboard,
    get_set_type_keyboard, 
    get_size_keyboard, 
    get_alumochrome_keyboard,
    get_suspensia_type_keyboard,
    get_cancel_keyboard,
    get_back_to_menu_keyboard,
    get_start_keyboard,
    get_order_exists_keyboard
)
from config import config
from db import db

router = Router()

async def safe_edit_message(callback: CallbackQuery, text: str, keyboard: InlineKeyboardMarkup = None, parse_mode: str = "HTML"):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
    current_text = callback.message.text or ""
    current_markup = callback.message.reply_markup
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç—ã (—É–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
    current_text_clean = re.sub(r'<[^>]+>', '', current_text).strip()
    new_text_clean = re.sub(r'<[^>]+>', '', text).strip()
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if current_text_clean != new_text_clean or current_markup != keyboard:
        try:
            await callback.message.edit_text(
                text,
                parse_mode=parse_mode,
                reply_markup=keyboard
            )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å),
            # –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –±–µ–∑ –æ—à–∏–±–∫–∏
            logging.warning(f"Failed to edit message: {e}")
    # –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

def calculate_price(set_type: str, size: str = None, alumochrome: bool = False, suspensia_type: str = None, quantity: int = 1) -> int:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–Ω—É –∑–∞–∫–∞–∑–∞"""
    base_price = 0
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logging.info(f"–†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã: set_type={set_type}, size={size}, alumochrome={alumochrome}, suspensia_type={suspensia_type}, quantity={quantity}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–∫–∞–∑–æ–≤
    if set_type == "nakidka":
        base_price = config.PRICE_NAKIDKA
        logging.info(f"–¶–µ–Ω–∞ –∑–∞ –Ω–∞—Å–∞–¥–∫–∏: {base_price} —Ä—É–±.")
        return base_price
    
    elif set_type == "suspensia":
        if suspensia_type == "paint":
            base_price = config.PRICE_SUSPENSIA_PAINT
        elif suspensia_type == "logo":
            base_price = config.PRICE_SUSPENSIA_LOGO
        
        # –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        total_price = base_price * quantity
        logging.info(f"–¶–µ–Ω–∞ –∑–∞ —Å—É—Å–ø–æ—Ä—Ç—ã: {base_price} —Ä—É–±. √ó {quantity} —à—Ç. = {total_price} —Ä—É–±.")
        return total_price
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏—Å–∫–æ–≤ (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
    elif set_type == "single":
        if size == "R13":
            base_price = config.PRICE_SINGLE_R13
        elif size == "R14":
            base_price = config.PRICE_SINGLE_R14
        elif size == "R15":
            base_price = config.PRICE_SINGLE_R15
        elif size == "R16":
            base_price = config.PRICE_SINGLE_R16
        elif size == "R17":
            base_price = config.PRICE_SINGLE_R17
        elif size == "R18":
            base_price = config.PRICE_SINGLE_R18
        elif size == "R19":
            base_price = config.PRICE_SINGLE_R19
        elif size == "R20":
            base_price = config.PRICE_SINGLE_R20
        elif size == "R21":
            base_price = config.PRICE_SINGLE_R21
        elif size == "R22":
            base_price = config.PRICE_SINGLE_R22
        elif size == "R23":
            base_price = config.PRICE_SINGLE_R23
        elif size == "R24":
            base_price = config.PRICE_SINGLE_R24
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–ª–∞—Ç—É –∑–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É
        base_price += config.PRICE_PREP_SINGLE
        
    elif set_type == "set":
        if size == "R13":
            base_price = config.PRICE_SET_R13
        elif size == "R14":
            base_price = config.PRICE_SET_R14
        elif size == "R15":
            base_price = config.PRICE_SET_R15
        elif size == "R16":
            base_price = config.PRICE_SET_R16
        elif size == "R17":
            base_price = config.PRICE_SET_R17
        elif size == "R18":
            base_price = config.PRICE_SET_R18
        elif size == "R19":
            base_price = config.PRICE_SET_R19
        elif size == "R20":
            base_price = config.PRICE_SET_R20
        elif size == "R21":
            base_price = config.PRICE_SET_R21
        elif size == "R22":
            base_price = config.PRICE_SET_R22
        elif size == "R23":
            base_price = config.PRICE_SET_R23
        elif size == "R24":
            base_price = config.PRICE_SET_R24
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–ª–∞—Ç—É –∑–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É
        base_price += config.PRICE_PREP_SET
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–ª–∞—Ç—É –∑–∞ –∞–ª—é–º–æ—Ö—Ä–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∏—Å–∫–æ–≤)
    if alumochrome and set_type in ["single", "set"]:
        base_price += config.PRICE_ALUMOCHROME_EXTRA
    
    logging.info(f"–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: {base_price} —Ä—É–±.")
    return base_price

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    if str(message.chat.id) == str(config.MODERATION_CHAT_ID):
        return
    
    await state.clear()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user_id = await db.get_or_create_user(
        message.from_user.id, 
        message.from_user.full_name or message.from_user.username or "Unknown"
    )
    
    await message.answer(
        "üé® <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –º–∞–ª—è—Ä–æ–≤!</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=get_main_menu_keyboard()
    )

@router.callback_query(F.data == "main_menu")
async def show_main_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    
    text = "üé® <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    keyboard = get_main_menu_keyboard()
    
    await safe_edit_message(callback, text, keyboard)
    await callback.answer()


@router.callback_query(F.data == "create_order")
async def start_create_order(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    text = "üì∏ <b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–∏—Å–∫–∞(–æ–≤), –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–æ–∫—Ä–∞—Å–∏—Ç—å:"
    keyboard = get_cancel_keyboard()
    
    await safe_edit_message(callback, text, keyboard)
    await state.set_state(OrderStates.waiting_for_photo)
    await callback.answer()

@router.callback_query(F.data == "earnings_day")
async def show_earnings_day(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    user_id = await db.get_or_create_user(
        callback.from_user.id,
        callback.from_user.full_name or callback.from_user.username or "Unknown"
    )
    
    earnings = await db.get_user_earnings_today(user_id)
    
    text = f"üí∞ <b>–ó–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b> {earnings:,} —Ä—É–±."
    keyboard = get_back_to_menu_keyboard()
    
    await safe_edit_message(callback, text, keyboard)
    await callback.answer()

@router.callback_query(F.data == "earnings_month")
async def show_earnings_month(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ –º–µ—Å—è—Ü"""
    user_id = await db.get_or_create_user(
        callback.from_user.id,
        callback.from_user.full_name or callback.from_user.username or "Unknown"
    )
    
    earnings = await db.get_user_earnings_month(user_id)
    
    text = f"üí∞ <b>–ó–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:</b> {earnings:,} —Ä—É–±."
    keyboard = get_back_to_menu_keyboard()
    
    await safe_edit_message(callback, text, keyboard)
    await callback.answer()

@router.callback_query(F.data == "help")
async def show_help(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    help_text = (
        "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
        "üé® <b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:</b>\n"
        "1. –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑'\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–∏—Å–∫–∞(–æ–≤)\n"
        "3. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞\n"
        "4. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø (–æ–¥–∏–Ω –¥–∏—Å–∫/–∫–æ–º–ø–ª–µ–∫—Ç)\n"
        "5. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –¥–∏—Å–∫–∞\n"
        "6. –£–∫–∞–∂–∏—Ç–µ –Ω—É–∂–µ–Ω –ª–∏ –∞–ª—é–º–æ—Ö—Ä–æ–º\n\n"
        "üí∞ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        "‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ –¥–µ–Ω—å - —Å—É–º–º–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ –º–µ—Å—è—Ü - —Å—É–º–º–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü\n\n"
        "üìã <b>–°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤:</b>\n"
        "‚Ä¢ –ß–µ—Ä–Ω–æ–≤–∏–∫ - –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
        "‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω - –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç, —Å—É–º–º–∞ –∑–∞—Å—á–∏—Ç–∞–Ω–∞\n"
        "‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω - –∑–∞–∫–∞–∑ –Ω–µ –ø—Ä–∏–Ω—è—Ç\n\n"
        "‚ùì <b>–ü—Ä–æ–±–ª–µ–º—ã?</b>\n"
        "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
    )
    
    keyboard = get_back_to_menu_keyboard()
    
    await safe_edit_message(callback, help_text, keyboard)
    await callback.answer()

@router.message(StateFilter(OrderStates.waiting_for_photo), F.photo)
async def process_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–æ—Ç–æ
    photo = max(message.photo, key=lambda x: x.file_size)
    
    await state.update_data(photo_file_id=photo.file_id)
    
    await message.answer(
        "üì∏ <b>–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()
    )
    
    await state.set_state(OrderStates.waiting_for_order_number)

@router.message(StateFilter(OrderStates.waiting_for_photo))
async def process_non_photo(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ-—Ñ–æ—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ"""
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–∏—Å–∫–∞(–æ–≤) –¥–ª—è –ø–æ–∫—Ä–∞—Å–∫–∏.",
        reply_markup=get_cancel_keyboard()
    )


@router.message(StateFilter(OrderStates.waiting_for_order_number))
async def process_order_number(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞"""
    if not message.text:
        await message.answer("‚ùå –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    order_number = message.text.strip()
    
    if not order_number:
        await message.answer("‚ùå –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    if await db.check_order_number_exists(order_number):
        await message.answer(
            f"‚ö†Ô∏è <b>–ó–∞–∫–∞–∑ —Å –Ω–æ–º–µ—Ä–æ–º '{order_number}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!</b>\n\n"
            f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            parse_mode="HTML",
            reply_markup=get_order_exists_keyboard(order_number)
        )
        return
    
    await state.update_data(order_number=order_number)
    
    await message.answer(
        "üìã <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–∫–∞–∑–∞:".format(order_number),
        parse_mode="HTML",
        reply_markup=get_set_type_keyboard()
    )
    
    await state.set_state(OrderStates.waiting_for_set_type)

@router.callback_query(F.data.startswith("set_type_"), StateFilter(OrderStates.waiting_for_set_type))
async def process_set_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–∞"""
    set_type = callback.data.split("_")[2]  # single, set, nakidka, suspensia
    
    await state.update_data(set_type=set_type)
    
    if set_type == "nakidka":
        # –î–ª—è –Ω–∞—Å–∞–¥–æ–∫ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        data = await state.get_data()
        price = calculate_price("nakidka")
        await state.update_data(price=price)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        await create_order_from_data(callback, state)
        return
        
    elif set_type == "suspensia":
        # –î–ª—è —Å—É–ø–æ—Ä—Ç–æ–≤ –≤—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø (–ø–æ–∫—Ä–∞—Å–∫–∞ –∏–ª–∏ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º)
        text = "üî∏ <b>–°—É–ø–æ—Ä—Ç–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:"
        keyboard = get_suspensia_type_keyboard()
        
        await safe_edit_message(callback, text, keyboard)
        await state.set_state(OrderStates.waiting_for_suspensia_type)
        await callback.answer()
        return
        
    else:
        # –î–ª—è –¥–∏—Å–∫–æ–≤ (single/set) –≤—ã–±–∏—Ä–∞–µ–º —Ä–∞–∑–º–µ—Ä
        set_type_text = "–æ–¥–∏–Ω –¥–∏—Å–∫" if set_type == "single" else "–∫–æ–º–ø–ª–µ–∫—Ç"
        
        text = f"üìã <b>–¢–∏–ø –∑–∞–∫–∞–∑–∞:</b> {set_type_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –¥–∏—Å–∫–∞:"
        keyboard = get_size_keyboard()
        
        await safe_edit_message(callback, text, keyboard)
        await state.set_state(OrderStates.waiting_for_size)
        await callback.answer()

@router.callback_query(F.data.startswith("size_"), StateFilter(OrderStates.waiting_for_size))
async def process_size(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –¥–∏—Å–∫–∞"""
    size = callback.data.split("_")[1]  # R15, R16, etc.
    
    logging.info(f"–í—ã–±—Ä–∞–Ω —Ä–∞–∑–º–µ—Ä –¥–∏—Å–∫–∞: {size}")
    
    await state.update_data(size=size)
    
    text = f"üìè <b>–†–∞–∑–º–µ—Ä –¥–∏—Å–∫–∞:</b> {size}\n\n–ù—É–∂–µ–Ω –ª–∏ –∞–ª—é–º–æ—Ö—Ä–æ–º?"
    keyboard = get_alumochrome_keyboard()
    
    await safe_edit_message(callback, text, keyboard)
    
    await state.set_state(OrderStates.waiting_for_alumochrome)
    await callback.answer()

@router.callback_query(F.data.startswith("suspensia_type_"), StateFilter(OrderStates.waiting_for_suspensia_type))
async def process_suspensia_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å—É–ø–æ—Ä—Ç–æ–≤"""
    suspensia_type = callback.data.split("_")[2]  # paint –∏–ª–∏ logo
    
    await state.update_data(suspensia_type=suspensia_type)
    
    text = "üî∏ <b>–°—É–ø–æ—Ä—Ç–∞</b>\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—É–∫:"
    keyboard = get_cancel_keyboard()
    
    await safe_edit_message(callback, text, keyboard)
    await state.set_state(OrderStates.waiting_for_suspensia_quantity)
    await callback.answer()

@router.message(StateFilter(OrderStates.waiting_for_suspensia_quantity))
async def process_suspensia_quantity(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—É–ø–æ—Ä—Ç–æ–≤"""
    if not message.text:
        await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    try:
        quantity = int(message.text.strip())
        
        if quantity <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        if quantity > 100:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 100. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        await state.update_data(quantity=quantity)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        data = await state.get_data()
        suspensia_type = data["suspensia_type"]
        price = calculate_price(
            set_type="suspensia",
            suspensia_type=suspensia_type,
            quantity=quantity
        )
        await state.update_data(price=price)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        await create_order_from_message_data(message, state)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return

async def create_order_from_message_data(message: Message, state: FSMContext):
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user_id = await db.get_or_create_user(
        message.from_user.id,
        message.from_user.full_name or message.from_user.username or "Unknown"
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    if await db.check_order_number_exists(data["order_number"]):
        await message.answer(
            f"‚ö†Ô∏è <b>–ó–∞–∫–∞–∑ —Å –Ω–æ–º–µ—Ä–æ–º '{data['order_number']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!</b>\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            parse_mode="HTML",
            reply_markup=get_order_exists_keyboard(data["order_number"])
        )
        return
    
    try:
        order_id = await db.create_order(
            order_number=data["order_number"],
            user_id=user_id,
            set_type=data["set_type"],
            size=data.get("size"),
            alumochrome=data.get("alumochrome", False),
            price=data["price"],
            photo_file_id=data["photo_file_id"],
            suspensia_type=data.get("suspensia_type"),
            quantity=data.get("quantity", 1)
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        order_data = {
            "order_number": data["order_number"],
            "set_type": data["set_type"],
            "size": data.get("size"),
            "alumochrome": data.get("alumochrome", False),
            "suspensia_type": data.get("suspensia_type"),
            "quantity": data.get("quantity", 1),
            "price": data["price"],
            "photo_file_id": data["photo_file_id"]
        }
        await send_admin_notification(message.bot, data["order_number"], order_data, message.from_user.username or message.from_user.full_name)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        set_type_text = get_set_type_text(data["set_type"], data)
        price = data["price"]
        
        text = (f"‚úÖ <b>–ó–∞–∫–∞–∑ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
                f"üìã <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {data['order_number']}\n"
                f"üîπ <b>–¢–∏–ø:</b> {set_type_text}\n"
                f"üí∞ <b>–¶–µ–Ω–∞:</b> {price:,} —Ä—É–±.\n\n"
                f"–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        
        await message.answer(text, parse_mode="HTML", reply_markup=get_back_to_menu_keyboard())
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞!</b>\n\n"
            f"–ó–∞–∫–∞–∑ —Å –Ω–æ–º–µ—Ä–æ–º '{data['order_number']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.",
            parse_mode="HTML",
            reply_markup=get_back_to_menu_keyboard()
        )
        return
    
    await state.set_state(OrderStates.order_confirmed)

def get_set_type_text(set_type: str, data: dict) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–∞"""
    if set_type == "single":
        return "–æ–¥–∏–Ω –¥–∏—Å–∫"
    elif set_type == "set":
        return "–∫–æ–º–ø–ª–µ–∫—Ç"
    elif set_type == "nakidka":
        return "–Ω–∞—Å–∞–¥–∫–∏"
    elif set_type == "suspensia":
        suspensia_type = data.get("suspensia_type")
        quantity = data.get("quantity", 1)
        if suspensia_type == "paint":
            return f"—Å—É–ø–æ—Ä—Ç–∞ –ø–æ–∫—Ä–∞—Å–∫–∞ ({quantity} —à—Ç.)"
        elif suspensia_type == "logo":
            return f"—Å—É–ø–æ—Ä—Ç–∞ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º ({quantity} —à—Ç.)"
        else:
            return f"—Å—É–ø–æ—Ä—Ç–∞ ({quantity} —à—Ç.)"
    else:
        return set_type

@router.callback_query(F.data.startswith("alumochrome_"), StateFilter(OrderStates.waiting_for_alumochrome))
async def process_alumochrome(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–ª—é–º–æ—Ö—Ä–æ–º–∞"""
    alumochrome = callback.data.split("_")[1] == "yes"
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    data = await state.get_data()
    set_type = data["set_type"]
    size = data["size"]
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É
    price = calculate_price(set_type, size, alumochrome)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    await state.update_data(alumochrome=alumochrome, price=price)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    await create_order_from_data(callback, state)

async def create_order_from_data(callback: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user_id = await db.get_or_create_user(
        callback.from_user.id,
        callback.from_user.full_name or callback.from_user.username or "Unknown"
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    if await db.check_order_number_exists(data["order_number"]):
        text = f"‚ö†Ô∏è <b>–ó–∞–∫–∞–∑ —Å –Ω–æ–º–µ—Ä–æ–º '{data['order_number']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!</b>\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
        keyboard = get_order_exists_keyboard(data["order_number"])
        
        await safe_edit_message(callback, text, keyboard)
        await callback.answer("‚ùå –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    
    try:
        order_id = await db.create_order(
            order_number=data["order_number"],
            user_id=user_id,
            set_type=data["set_type"],
            size=data.get("size"),
            alumochrome=data.get("alumochrome", False),
            price=data["price"],
            photo_file_id=data["photo_file_id"],
            suspensia_type=data.get("suspensia_type"),
            quantity=data.get("quantity", 1)
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        order_data = {
            "order_number": data["order_number"],
            "set_type": data["set_type"],
            "size": data.get("size"),
            "alumochrome": data.get("alumochrome", False),
            "suspensia_type": data.get("suspensia_type"),
            "quantity": data.get("quantity", 1),
            "price": data["price"],
            "photo_file_id": data["photo_file_id"]
        }
        await send_admin_notification(callback.bot, data["order_number"], order_data, callback.from_user.username or callback.from_user.full_name)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        set_type_text = get_set_type_text(data["set_type"], data)
        price = data["price"]
        
        text = (f"‚úÖ <b>–ó–∞–∫–∞–∑ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
                f"üìã <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {data['order_number']}\n"
                f"üîπ <b>–¢–∏–ø:</b> {set_type_text}\n"
                f"üí∞ <b>–¶–µ–Ω–∞:</b> {price:,} —Ä—É–±.\n\n"
                f"–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        
        await safe_edit_message(callback, text, get_back_to_menu_keyboard())
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        text = (f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞!</b>\n\n"
                f"–ó–∞–∫–∞–∑ —Å –Ω–æ–º–µ—Ä–æ–º '{data['order_number']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.")
        
        await safe_edit_message(callback, text, get_back_to_menu_keyboard())
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    
    await state.set_state(OrderStates.order_confirmed)
    await callback.answer("‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω")

@router.callback_query(F.data.startswith("overwrite_order_"))
async def process_overwrite_order(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –∑–∞–∫–∞–∑–∞"""
    order_number = callback.data.split("_", 2)[2]  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    
    # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑
    deleted = await db.delete_order_by_number(order_number)
    
    if deleted:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(order_number=order_number)
        
        text = (f"‚úÖ <b>–°—Ç–∞—Ä—ã–π –∑–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω!</b>\n\n"
                f"üìã <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {order_number}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–∫–∞–∑–∞:")
        keyboard = get_set_type_keyboard()
        
        await safe_edit_message(callback, text, keyboard)
        
        await state.set_state(OrderStates.waiting_for_set_type)
        await callback.answer("‚úÖ –°—Ç–∞—Ä—ã–π –∑–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ")
    else:
        text = "‚ùå <b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞!</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞."
        keyboard = get_cancel_keyboard()
        
        await safe_edit_message(callback, text, keyboard)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")

@router.callback_query(F.data == "change_order_number")
async def process_change_order_number(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞"""
    text = "üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b>"
    keyboard = get_cancel_keyboard()
    
    await safe_edit_message(callback, text, keyboard)
    
    await state.set_state(OrderStates.waiting_for_order_number)
    await callback.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞")

@router.callback_query(F.data == "cancel")
async def process_cancel(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞"""
    await state.clear()
    
    text = "‚ùå <b>–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    keyboard = get_main_menu_keyboard()
    
    await safe_edit_message(callback, text, keyboard)
    await callback.answer()

async def send_admin_notification(bot, order_number: str, order_data: dict, username: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
    if not config.MODERATION_CHAT_ID:
        logging.warning("MODERATION_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return
    
    set_type_text = get_set_type_text(order_data.get("set_type"), order_data)
    
    text = (
        f"üÜï <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n\n"
        f"üë§ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> @{username}\n"
        f"üìã <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {order_number}\n"
        f"üîπ <b>–¢–∏–ø:</b> {set_type_text}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {order_data.get('price', 0):,} —Ä—É–±."
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∏—Å–∫–æ–≤
    if order_data.get("set_type") in ["single", "set"]:
        size = order_data.get('size', '–ù–µ —É–∫–∞–∑–∞–Ω')
        alumochrome_text = "–î–∞" if order_data.get("alumochrome", False) else "–ù–µ—Ç"
        text += f"\nüìè <b>–†–∞–∑–º–µ—Ä:</b> {size}\n‚ú® <b>–ê–ª—é–º–æ—Ö—Ä–æ–º:</b> {alumochrome_text}"
    
    try:
        from keyboards import get_admin_order_keyboard
        await bot.send_photo(
            chat_id=config.MODERATION_CHAT_ID,
            photo=order_data["photo_file_id"],
            caption=text,
            parse_mode="HTML",
            reply_markup=get_admin_order_keyboard(order_number)
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")


@router.message()
async def handle_any_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    if str(message.chat.id) == str(config.MODERATION_CHAT_ID):
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    current_state = await state.get_state()
    if current_state is None:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user_id = await db.get_or_create_user(
            message.from_user.id, 
            message.from_user.full_name or message.from_user.username or "Unknown"
        )
        
        await message.answer(
            "üé® <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –º–∞–ª—è—Ä–æ–≤!</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="HTML",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=get_cancel_keyboard()
        )
