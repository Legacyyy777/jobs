import logging
import re
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, PhotoSize, InlineKeyboardMarkup
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state

from handlers.fsm import OrderStates, UserStates
from keyboards import (
    get_main_menu_keyboard,
    get_set_type_keyboard, 
    get_size_keyboard, 
    get_alumochrome_keyboard,
    get_suspensia_type_keyboard,
    get_cancel_keyboard,
    get_back_to_menu_keyboard,
    get_start_keyboard,
    get_order_exists_keyboard,
    get_profession_keyboard,
    get_spraying_keyboard
)
from config import config
from db import db

router = Router()

async def safe_edit_message(callback: CallbackQuery, text: str, keyboard: InlineKeyboardMarkup = None, parse_mode: str = "HTML"):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
    current_text = callback.message.text or ""
    current_markup = callback.message.reply_markup
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç—ã (—É–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
    current_text_clean = re.sub(r'<[^>]+>', '', current_text).strip()
    new_text_clean = re.sub(r'<[^>]+>', '', text).strip()
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if current_text_clean != new_text_clean or current_markup != keyboard:
        try:
            await callback.message.edit_text(
                text,
                parse_mode=parse_mode,
                reply_markup=keyboard
            )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å),
            # –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –±–µ–∑ –æ—à–∏–±–∫–∏
            logging.warning(f"Failed to edit message: {e}")
    # –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

def calculate_price(profession: str, set_type: str, size: str = None, alumochrome: bool = False, 
                   suspensia_type: str = None, quantity: int = 1, spraying_deep: int = 0, spraying_shallow: int = 0) -> int:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–Ω—É –∑–∞–∫–∞–∑–∞"""
    base_price = 0
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    profession_emoji = "üé®" if profession == "painter" else "üí®"
    profession_name = "–ú–∞–ª—è—Ä" if profession == "painter" else "–ü–µ—Å–∫–æ—Å—Ç—Ä—É–π—â–∏–∫"
    logging.info(f"üí∞ –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã | {profession_emoji} {profession_name} | –¢–∏–ø: {set_type} | –†–∞–∑–º–µ—Ä: {size or '–ù/–î'} | –¶–µ–Ω–∞: {alumochrome and '+–ê–ª—é–º–æ—Ö—Ä–æ–º' or ''} {suspensia_type and f'({suspensia_type})' or ''} {quantity > 1 and f'√ó{quantity}' or ''} {spraying_deep > 0 and f'–ì–ª—É–±–æ–∫–∏—Ö:{spraying_deep}' or ''} {spraying_shallow > 0 and f'–ù–µ–≥–ª—É–±–æ–∫–∏—Ö:{spraying_shallow}' or ''}")
    
    if profession == "sandblaster":
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–µ—Å–∫–æ—Å—Ç—Ä—É–π—â–∏–∫–∞
        if set_type == "nakidka":
            base_price = config.PRICE_SANDBLASTER_NAKIDKA
            logging.info(f"üí∞ –¶–µ–Ω–∞ –∑–∞ –Ω–∞—Å–∞–¥–∫–∏ (–ø–µ—Å–∫–æ—Å—Ç—Ä—É–π—â–∏–∫): {base_price}‚ÇΩ")
            return base_price
        
        elif set_type == "suspensia":
            base_price = config.PRICE_SANDBLASTER_SUSPENSIA
            total_price = base_price * quantity
            logging.info(f"üí∞ –¶–µ–Ω–∞ –∑–∞ —Å—É–ø–æ—Ä—Ç–∞ (–ø–µ—Å–∫–æ—Å—Ç—Ä—É–π—â–∏–∫): {base_price}‚ÇΩ √ó {quantity} —à—Ç. = {total_price}‚ÇΩ")
            return total_price
        
        elif set_type == "single":
            # –¶–µ–Ω—ã –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –¥–∏—Å–∫–æ–≤ –ø–µ—Å–∫–æ—Å—Ç—Ä—É–π—â–∏–∫–∞
            price_map = {
                "R12": config.PRICE_SANDBLASTER_SINGLE_R12,
                "R13": config.PRICE_SANDBLASTER_SINGLE_R13,
                "R14": config.PRICE_SANDBLASTER_SINGLE_R14,
                "R15": config.PRICE_SANDBLASTER_SINGLE_R15,
                "R16": config.PRICE_SANDBLASTER_SINGLE_R16,
                "R17": config.PRICE_SANDBLASTER_SINGLE_R17,
                "R18": config.PRICE_SANDBLASTER_SINGLE_R18,
                "R19": config.PRICE_SANDBLASTER_SINGLE_R19,
                "R20": config.PRICE_SANDBLASTER_SINGLE_R20,
                "R21": config.PRICE_SANDBLASTER_SINGLE_R21,
                "R22": config.PRICE_SANDBLASTER_SINGLE_R22,
                "R23": config.PRICE_SANDBLASTER_SINGLE_R23,
                "R24": config.PRICE_SANDBLASTER_SINGLE_R24,
            }
            base_price = price_map.get(size, 0)
            # –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏—Å–∫–æ–≤
            base_price = base_price * quantity
            
        elif set_type == "set":
            # –¶–µ–Ω—ã –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤ –ø–µ—Å–∫–æ—Å—Ç—Ä—É–π—â–∏–∫–∞
            price_map = {
                "R12": config.PRICE_SANDBLASTER_SET_R12,
                "R13": config.PRICE_SANDBLASTER_SET_R13,
                "R14": config.PRICE_SANDBLASTER_SET_R14,
                "R15": config.PRICE_SANDBLASTER_SET_R15,
                "R16": config.PRICE_SANDBLASTER_SET_R16,
                "R17": config.PRICE_SANDBLASTER_SET_R17,
                "R18": config.PRICE_SANDBLASTER_SET_R18,
                "R19": config.PRICE_SANDBLASTER_SET_R19,
                "R20": config.PRICE_SANDBLASTER_SET_R20,
                "R21": config.PRICE_SANDBLASTER_SET_R21,
                "R22": config.PRICE_SANDBLASTER_SET_R22,
                "R23": config.PRICE_SANDBLASTER_SET_R23,
                "R24": config.PRICE_SANDBLASTER_SET_R24,
            }
            base_price = price_map.get(size, 0)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–ø—ã–ª–µ–Ω–∏—è
        spraying_price = (spraying_deep * config.PRICE_SPRAYING_DEEP) + (spraying_shallow * config.PRICE_SPRAYING_SHALLOW)
        # –ù–∞–ø—ã–ª–µ–Ω–∏–µ —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏—Å–∫–æ–≤
        spraying_price = spraying_price * quantity
        total_price = base_price + spraying_price
        
        logging.info(f"üí∞ –¶–µ–Ω–∞ –∑–∞ {set_type} {size} √ó{quantity} (–ø–µ—Å–∫–æ—Å—Ç—Ä—É–π—â–∏–∫): {base_price}‚ÇΩ + –Ω–∞–ø—ã–ª–µ–Ω–∏–µ: {spraying_price}‚ÇΩ = {total_price}‚ÇΩ")
        return total_price
    
    else:
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –º–∞–ª—è—Ä–∞ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è)
        if set_type == "nakidka":
            base_price = config.PRICE_NAKIDKA
            logging.info(f"üí∞ –¶–µ–Ω–∞ –∑–∞ –Ω–∞—Å–∞–¥–∫–∏ (–º–∞–ª—è—Ä): {base_price}‚ÇΩ")
            return base_price
        
        elif set_type == "suspensia":
            if suspensia_type == "paint":
                base_price = config.PRICE_SUSPENSIA_PAINT
            elif suspensia_type == "logo":
                base_price = config.PRICE_SUSPENSIA_LOGO
            
            total_price = base_price * quantity
            logging.info(f"üí∞ –¶–µ–Ω–∞ –∑–∞ —Å—É–ø–æ—Ä—Ç–∞ (–º–∞–ª—è—Ä): {base_price}‚ÇΩ √ó {quantity} —à—Ç. = {total_price}‚ÇΩ")
            return total_price
    
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏—Å–∫–æ–≤ –¥–ª—è –º–∞–ª—è—Ä–∞
        elif set_type == "single":
            if size == "R12":
                base_price = config.PRICE_SINGLE_R12
            elif size == "R13":
                base_price = config.PRICE_SINGLE_R13
            elif size == "R14":
                base_price = config.PRICE_SINGLE_R14
            elif size == "R15":
                base_price = config.PRICE_SINGLE_R15
            elif size == "R16":
                base_price = config.PRICE_SINGLE_R16
            elif size == "R17":
                base_price = config.PRICE_SINGLE_R17
            elif size == "R18":
                base_price = config.PRICE_SINGLE_R18
            elif size == "R19":
                base_price = config.PRICE_SINGLE_R19
            elif size == "R20":
                base_price = config.PRICE_SINGLE_R20
            elif size == "R21":
                base_price = config.PRICE_SINGLE_R21
            elif size == "R22":
                base_price = config.PRICE_SINGLE_R22
            elif size == "R23":
                base_price = config.PRICE_SINGLE_R23
            elif size == "R24":
                base_price = config.PRICE_SINGLE_R24
        
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–ª–∞—Ç—É –∑–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É
            base_price += config.PRICE_PREP_SINGLE
            
            # –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏—Å–∫–æ–≤
            base_price = base_price * quantity
        
        elif set_type == "set":
            if size == "R12":
                base_price = config.PRICE_SET_R12
            elif size == "R13":
                base_price = config.PRICE_SET_R13
            elif size == "R14":
                base_price = config.PRICE_SET_R14
            elif size == "R15":
                base_price = config.PRICE_SET_R15
            elif size == "R16":
                base_price = config.PRICE_SET_R16
            elif size == "R17":
                base_price = config.PRICE_SET_R17
            elif size == "R18":
                base_price = config.PRICE_SET_R18
            elif size == "R19":
                base_price = config.PRICE_SET_R19
            elif size == "R20":
                base_price = config.PRICE_SET_R20
            elif size == "R21":
                base_price = config.PRICE_SET_R21
            elif size == "R22":
                base_price = config.PRICE_SET_R22
            elif size == "R23":
                base_price = config.PRICE_SET_R23
            elif size == "R24":
                base_price = config.PRICE_SET_R24
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–ª–∞—Ç—É –∑–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É
            base_price += config.PRICE_PREP_SET
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–ª–∞—Ç—É –∑–∞ –∞–ª—é–º–æ—Ö—Ä–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∏—Å–∫–æ–≤ –º–∞–ª—è—Ä–∞)
        if alumochrome and set_type in ["single", "set"]:
            base_price += config.PRICE_ALUMOCHROME_EXTRA
    
    logging.info(f"üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: {base_price}‚ÇΩ")
    return base_price

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    if str(message.chat.id) == str(config.MODERATION_CHAT_ID):
        return
    
    await state.clear()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_profession = await db.get_user_profession(message.from_user.id)
    profession_emoji = "üé®" if user_profession == "painter" else "üí®" if user_profession else "‚ùì"
    profession_name = "–ú–∞–ª—è—Ä" if user_profession == "painter" else "–ü–µ—Å–∫–æ—Å—Ç—Ä—É–π—â–∏–∫" if user_profession == "sandblaster" else "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
    logging.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} | –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {profession_emoji} {profession_name}")
    
    if user_profession is not None:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–ª –ø—Ä–æ—Ñ–µ—Å—Å–∏—é, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if user_profession == "painter":
            text = "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –º–∞–ª—è—Ä–æ–≤!</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        else:
            text = "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–µ—Å–∫–æ—Å—Ç—Ä—É–π—â–∏–∫–æ–≤!</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        keyboard = get_main_menu_keyboard(user_profession)
        
        await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª –ø—Ä–æ—Ñ–µ—Å—Å–∏—é
        text = "üë®‚Äçüé® <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ—Ñ–µ—Å—Å–∏—é:"
        keyboard = get_profession_keyboard()
        
        await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
        await state.set_state(UserStates.waiting_for_profession)

@router.callback_query(F.data.startswith("profession_"), StateFilter(UserStates.waiting_for_profession))
async def process_profession_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ"""
    profession = callback.data.split("_")[1]  # painter –∏–ª–∏ sandblaster
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–∫–ª—é—á–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—é)
    await db.get_or_create_user(
        callback.from_user.id,
        callback.from_user.full_name or callback.from_user.username or "Unknown",
        profession
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    if profession == "painter":
        text = "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –º–∞–ª—è—Ä–æ–≤!</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    else:
        text = "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–µ—Å–∫–æ—Å—Ç—Ä—É–π—â–∏–∫–æ–≤!</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    keyboard = get_main_menu_keyboard(profession)
    
    await safe_edit_message(callback, text, keyboard)
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "main_menu")
async def show_main_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_profession = await db.get_user_profession(callback.from_user.id)
    
    if user_profession == "painter":
        text = "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –º–∞–ª—è—Ä–æ–≤!</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    elif user_profession == "sandblaster":
        text = "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–µ—Å–∫–æ—Å—Ç—Ä—É–π—â–∏–∫–æ–≤!</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    else:
        # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        text = "üë®‚Äçüé® <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ—Ñ–µ—Å—Å–∏—é:</b>"
        keyboard = get_profession_keyboard()
        await safe_edit_message(callback, text, keyboard)
        await state.set_state(UserStates.waiting_for_profession)
        await callback.answer()
        return
    
    keyboard = get_main_menu_keyboard(user_profession)
    
    await safe_edit_message(callback, text, keyboard)
    await callback.answer()


@router.callback_query(F.data == "create_order")
async def start_create_order(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_profession = await db.get_user_profession(callback.from_user.id)
    
    if user_profession is None:
        # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        text = "üë®‚Äçüé® <b>–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ—Ñ–µ—Å—Å–∏—é:</b>"
        keyboard = get_profession_keyboard()
        await safe_edit_message(callback, text, keyboard)
        await state.set_state(UserStates.waiting_for_profession)
        await callback.answer()
        return
    
    profession_text = "üé® –ú–∞–ª—è—Ä" if user_profession == "painter" else "üí® –ü–µ—Å–∫–æ—Å—Ç—Ä—É–π—â–∏–∫"
    text = f"üì∏ <b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ({profession_text})</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–∏—Å–∫–∞(–æ–≤), –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–æ–∫—Ä–∞—Å–∏—Ç—å:"
    keyboard = get_cancel_keyboard()
    
    await safe_edit_message(callback, text, keyboard)
    await state.set_state(OrderStates.waiting_for_photo)
    await callback.answer()

@router.callback_query(F.data == "earnings_day")
async def show_earnings_day(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    user_id = await db.get_or_create_user(
        callback.from_user.id,
        callback.from_user.full_name or callback.from_user.username or "Unknown"
    )
    
    earnings = await db.get_user_earnings_today(user_id)
    avg_earnings = await db.get_user_avg_earnings_per_day(user_id)
    
    text = (
        f"üí∞ <b>–ó–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b> {earnings:,} —Ä—É–±.\n\n"
        f"üìä <b>–°—Ä–µ–¥–Ω–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ –¥–µ–Ω—å:</b> {avg_earnings:,.0f} —Ä—É–±."
    )
    keyboard = get_back_to_menu_keyboard()
    
    await safe_edit_message(callback, text, keyboard)
    await callback.answer()

@router.callback_query(F.data == "earnings_month")
async def show_earnings_month(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ –º–µ—Å—è—Ü"""
    user_id = await db.get_or_create_user(
        callback.from_user.id,
        callback.from_user.full_name or callback.from_user.username or "Unknown"
    )
    
    earnings = await db.get_user_earnings_month(user_id)
    
    text = f"üí∞ <b>–ó–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:</b> {earnings:,} —Ä—É–±."
    keyboard = get_back_to_menu_keyboard()
    
    await safe_edit_message(callback, text, keyboard)
    await callback.answer()

@router.callback_query(F.data == "help")
async def show_help(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    help_text = (
        "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
        "üé® <b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:</b>\n"
        "1. –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑'\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–∏—Å–∫–∞(–æ–≤)\n"
        "3. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞\n"
        "4. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø (–æ–¥–∏–Ω –¥–∏—Å–∫/–∫–æ–º–ø–ª–µ–∫—Ç)\n"
        "5. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –¥–∏—Å–∫–∞\n"
        "6. –£–∫–∞–∂–∏—Ç–µ –Ω—É–∂–µ–Ω –ª–∏ –∞–ª—é–º–æ—Ö—Ä–æ–º\n\n"
        "üí∞ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        "‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ –¥–µ–Ω—å - —Å—É–º–º–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ –º–µ—Å—è—Ü - —Å—É–º–º–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü\n\n"
        "üìã <b>–°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤:</b>\n"
        "‚Ä¢ –ß–µ—Ä–Ω–æ–≤–∏–∫ - –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
        "‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω - –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç, —Å—É–º–º–∞ –∑–∞—Å—á–∏—Ç–∞–Ω–∞\n"
        "‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω - –∑–∞–∫–∞–∑ –Ω–µ –ø—Ä–∏–Ω—è—Ç\n\n"
        "‚ùì <b>–ü—Ä–æ–±–ª–µ–º—ã?</b>\n"
        "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
    )
    
    keyboard = get_back_to_menu_keyboard()
    
    await safe_edit_message(callback, help_text, keyboard)
    await callback.answer()

@router.message(StateFilter(OrderStates.waiting_for_photo), F.photo)
async def process_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–æ—Ç–æ
    photo = max(message.photo, key=lambda x: x.file_size)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_profession = await db.get_user_profession(message.from_user.id)
    
    if user_profession is None:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ—Ñ–µ—Å—Å–∏—é. –ù–∞–∂–º–∏—Ç–µ /start",
            parse_mode="HTML"
        )
        return
    
    await state.update_data(photo_file_id=photo.file_id, profession=user_profession)
    
    await message.answer(
        "üì∏ <b>–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()
    )
    
    await state.set_state(OrderStates.waiting_for_order_number)

@router.message(StateFilter(OrderStates.waiting_for_photo))
async def process_non_photo(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ-—Ñ–æ—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ"""
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–∏—Å–∫–∞(–æ–≤) –¥–ª—è –ø–æ–∫—Ä–∞—Å–∫–∏.",
        reply_markup=get_cancel_keyboard()
    )


@router.message(StateFilter(OrderStates.waiting_for_order_number))
async def process_order_number(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞"""
    if not message.text:
        await message.answer("‚ùå –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    order_number = message.text.strip()
    
    if not order_number:
        await message.answer("‚ùå –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_profession = await db.get_user_profession(message.from_user.id)
    
    if user_profession is None:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–ª –ø—Ä–æ—Ñ–µ—Å—Å–∏—é, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤—ã–±–æ—Ä
        text = "üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ—Ñ–µ—Å—Å–∏—é:</b>"
        keyboard = get_profession_keyboard()
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        await state.set_state(UserStates.waiting_for_profession)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ —Å—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç–æ–π –∂–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
    if await db.check_order_number_exists(order_number, user_profession):
        await message.answer(
            f"‚ö†Ô∏è <b>–ó–∞–∫–∞–∑ —Å –Ω–æ–º–µ—Ä–æ–º '{order_number}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å—Ä–µ–¥–∏ {user_profession}–æ–≤!</b>\n\n"
            f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            parse_mode="HTML",
            reply_markup=get_order_exists_keyboard(order_number)
        )
        return
    
    await state.update_data(order_number=order_number, profession=user_profession)
    
    await message.answer(
        "üìã <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–∫–∞–∑–∞:".format(order_number),
        parse_mode="HTML",
        reply_markup=get_set_type_keyboard()
    )
    
    await state.set_state(OrderStates.waiting_for_set_type)

@router.callback_query(F.data.startswith("set_type_"), StateFilter(OrderStates.waiting_for_set_type))
async def process_set_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–∞"""
    set_type = callback.data.split("_")[2]  # single, set, nakidka, suspensia
    
    await state.update_data(set_type=set_type)
    
    if set_type == "nakidka":
        # –î–ª—è –Ω–∞—Å–∞–¥–æ–∫ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        data = await state.get_data()
        profession = data.get("profession", "painter")
        price = calculate_price(profession, "nakidka")
        await state.update_data(price=price)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        await create_order_from_data(callback, state)
        return
        
    elif set_type == "suspensia":
        data = await state.get_data()
        profession = data.get("profession", "painter")
        
        if profession == "sandblaster":
            # –î–ª—è –ø–µ—Å–∫–æ—Å—Ç—Ä—É–π—â–∏–∫–∞ —Å—Ä–∞–∑—É —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            text = "üî∏ <b>–°—É–ø–æ—Ä—Ç–∞</b>\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—É–∫:"
            keyboard = get_cancel_keyboard()
            
            await safe_edit_message(callback, text, keyboard)
            await state.set_state(OrderStates.waiting_for_suspensia_quantity)
        else:
            # –î–ª—è –º–∞–ª—è—Ä–∞ –≤—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø (–ø–æ–∫—Ä–∞—Å–∫–∞ –∏–ª–∏ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º)
            text = "üî∏ <b>–°—É–ø–æ—Ä—Ç–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:"
            keyboard = get_suspensia_type_keyboard()
            
            await safe_edit_message(callback, text, keyboard)
            await state.set_state(OrderStates.waiting_for_suspensia_type)
        
        await callback.answer()
        return
        
    elif set_type == "free":
        # –î–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–Ω—É
        text = "üÜì <b>–°–≤–æ–±–æ–¥–Ω—ã–π –∑–∞–∫–∞–∑</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö:"
        keyboard = get_cancel_keyboard()
        
        await safe_edit_message(callback, text, keyboard)
        await state.set_state(OrderStates.waiting_for_free_price)
        await callback.answer()
        return
        
    else:
        # –î–ª—è –¥–∏—Å–∫–æ–≤ (single/set) –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø
        if set_type == "single":
            # –î–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –¥–∏—Å–∫–æ–≤ —Å–Ω–∞—á–∞–ª–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            data = await state.get_data()
            profession = data.get("profession", "painter")
            
            text = "üîπ <b>–û–¥–∏–Ω –¥–∏—Å–∫</b>\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏—Å–∫–æ–≤:"
            keyboard = get_cancel_keyboard()
            
            await safe_edit_message(callback, text, keyboard)
            await state.set_state(OrderStates.waiting_for_disk_quantity)
        else:
            # –î–ª—è –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤ –≤—ã–±–∏—Ä–∞–µ–º —Ä–∞–∑–º–µ—Ä
            text = "üìã <b>–¢–∏–ø –∑–∞–∫–∞–∑–∞:</b> –∫–æ–º–ø–ª–µ–∫—Ç\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –¥–∏—Å–∫–∞:"
            keyboard = get_size_keyboard()
            
            await safe_edit_message(callback, text, keyboard)
            await state.set_state(OrderStates.waiting_for_size)
        
        await callback.answer()

@router.message(StateFilter(OrderStates.waiting_for_disk_quantity))
async def process_disk_quantity(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∏—Å–∫–æ–≤"""
    if not message.text:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏—Å–∫–æ–≤:")
        return
    
    try:
        quantity = int(message.text.strip())
        
        if quantity <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        await state.update_data(disk_quantity=quantity)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ä–∞–∑–º–µ—Ä–∞
        text = f"üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –¥–∏—Å–∫–∞:"
        keyboard = get_size_keyboard()
        
        await message.answer(text, reply_markup=keyboard)
        await state.set_state(OrderStates.waiting_for_size)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return

@router.callback_query(F.data.startswith("size_"), StateFilter(OrderStates.waiting_for_size))
async def process_size(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –¥–∏—Å–∫–∞"""
    size = callback.data.split("_")[1]  # R15, R16, etc.
    
    logging.info(f"üìè –í—ã–±—Ä–∞–Ω —Ä–∞–∑–º–µ—Ä –¥–∏—Å–∫–∞: {size}")
    
    await state.update_data(size=size)
    
    data = await state.get_data()
    profession = data.get("profession", "painter")
    
    if profession == "sandblaster":
        # –î–ª—è –ø–µ—Å–∫–æ—Å—Ç—Ä—É–π—â–∏–∫–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –Ω–∞–ø—ã–ª–µ–Ω–∏–µ
        text = f"üìè <b>–†–∞–∑–º–µ—Ä –¥–∏—Å–∫–∞:</b> {size}\n\n–ë—ã–ª–æ –ª–∏ –Ω–∞–ø—ã–ª–µ–Ω–∏–µ?"
        keyboard = get_spraying_keyboard()
        
        await safe_edit_message(callback, text, keyboard)
        await state.set_state(OrderStates.waiting_for_spraying)
    else:
        # –î–ª—è –º–∞–ª—è—Ä–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –∞–ª—é–º–æ—Ö—Ä–æ–º
        text = f"üìè <b>–†–∞–∑–º–µ—Ä –¥–∏—Å–∫–∞:</b> {size}\n\n–ù—É–∂–µ–Ω –ª–∏ –∞–ª—é–º–æ—Ö—Ä–æ–º?"
        keyboard = get_alumochrome_keyboard()
        
        await safe_edit_message(callback, text, keyboard)
        await state.set_state(OrderStates.waiting_for_alumochrome)
    
    await callback.answer()

@router.callback_query(F.data.startswith("suspensia_type_"), StateFilter(OrderStates.waiting_for_suspensia_type))
async def process_suspensia_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å—É–ø–æ—Ä—Ç–æ–≤"""
    suspensia_type = callback.data.split("_")[2]  # paint –∏–ª–∏ logo
    
    await state.update_data(suspensia_type=suspensia_type)
    
    text = "üî∏ <b>–°—É–ø–æ—Ä—Ç–∞</b>\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—É–∫:"
    keyboard = get_cancel_keyboard()
    
    await safe_edit_message(callback, text, keyboard)
    await state.set_state(OrderStates.waiting_for_suspensia_quantity)
    await callback.answer()

@router.callback_query(F.data.startswith("spraying_"), StateFilter(OrderStates.waiting_for_spraying))
async def process_spraying(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—ã–ª–µ–Ω–∏—è –¥–ª—è –ø–µ—Å–∫–æ—Å—Ç—Ä—É–π—â–∏–∫–∞"""
    spraying_choice = callback.data.split("_")[1]  # yes –∏–ª–∏ no
    
    if spraying_choice == "no":
        # –ù–µ—Ç –Ω–∞–ø—ã–ª–µ–Ω–∏—è - —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        data = await state.get_data()
        profession = data.get("profession", "painter")
        set_type = data.get("set_type")
        size = data.get("size")
        
        price = calculate_price(profession, set_type, size, spraying_deep=0, spraying_shallow=0)
        await state.update_data(price=price, spraying_deep=0, spraying_shallow=0)
        
        await create_order_from_data(callback, state)
        return
    else:
        # –ï—Å—Ç—å –Ω–∞–ø—ã–ª–µ–Ω–∏–µ - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª—É–±–æ–∫–∏—Ö
        text = "üí® <b>–ù–∞–ø—ã–ª–µ–Ω–∏–µ</b>\n\n–°–∫–æ–ª—å–∫–æ –±—ã–ª–æ <b>–≥–ª—É–±–æ–∫–∏—Ö</b> –Ω–∞–ø—ã–ª–µ–Ω–∏–π?\n(–í–≤–µ–¥–∏—Ç–µ 0, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ)"
        keyboard = get_cancel_keyboard()
        
        await safe_edit_message(callback, text, keyboard)
        await state.set_state(OrderStates.waiting_for_deep_spraying)
    
    await callback.answer()

@router.message(StateFilter(OrderStates.waiting_for_deep_spraying))
async def process_deep_spraying(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–ª—É–±–æ–∫–∏—Ö –Ω–∞–ø—ã–ª–µ–Ω–∏–π"""
    if not message.text:
        await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    try:
        deep_count = int(message.text.strip())
        
        if deep_count < 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        await state.update_data(spraying_deep=deep_count)
        
        text = "üí® <b>–ù–∞–ø—ã–ª–µ–Ω–∏–µ</b>\n\n–°–∫–æ–ª—å–∫–æ –±—ã–ª–æ <b>–Ω–µ–≥–ª—É–±–æ–∫–∏—Ö</b> –Ω–∞–ø—ã–ª–µ–Ω–∏–π?\n(–í–≤–µ–¥–∏—Ç–µ 0, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ)"
        keyboard = get_cancel_keyboard()
        
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        await state.set_state(OrderStates.waiting_for_shallow_spraying)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return

@router.message(StateFilter(OrderStates.waiting_for_shallow_spraying))
async def process_shallow_spraying(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–≥–ª—É–±–æ–∫–∏—Ö –Ω–∞–ø—ã–ª–µ–Ω–∏–π"""
    if not message.text:
        await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    try:
        shallow_count = int(message.text.strip())
        
        if shallow_count < 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        await state.update_data(spraying_shallow=shallow_count)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        data = await state.get_data()
        profession = data.get("profession", "painter")
        set_type = data.get("set_type")
        size = data.get("size")
        spraying_deep = data.get("spraying_deep", 0)
        
        price = calculate_price(profession, set_type, size, spraying_deep=spraying_deep, spraying_shallow=shallow_count)
        await state.update_data(price=price)
        
        await create_order_from_message_data(message, state)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return

@router.message(StateFilter(OrderStates.waiting_for_suspensia_quantity))
async def process_suspensia_quantity(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—É–ø–æ—Ä—Ç–æ–≤"""
    if not message.text:
        await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    try:
        quantity = int(message.text.strip())
        
        if quantity <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        if quantity > 100:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 100. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        await state.update_data(quantity=quantity)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        data = await state.get_data()
        profession = data.get("profession", "painter")
        
        if profession == "sandblaster":
            # –î–ª—è –ø–µ—Å–∫–æ—Å—Ç—Ä—É–π—â–∏–∫–∞ —Å—É–ø–æ—Ä—Ç—ã –±–µ–∑ —Ç–∏–ø–∞
            price = calculate_price(profession, "suspensia", quantity=quantity)
        else:
            # –î–ª—è –º–∞–ª—è—Ä–∞ —Å—É–ø–æ—Ä—Ç—ã —Å —Ç–∏–ø–æ–º
            suspensia_type = data["suspensia_type"]
            price = calculate_price(profession, "suspensia", suspensia_type=suspensia_type, quantity=quantity)
        
        await state.update_data(price=price)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        await create_order_from_message_data(message, state)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return

@router.message(StateFilter(OrderStates.waiting_for_free_price))
async def process_free_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    if not message.text:
        await message.answer("‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    try:
        price = int(message.text.strip())
        
        if price <= 0:
            await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        await state.update_data(price=price)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        await create_order_from_message_data(message, state)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return

async def create_order_from_message_data(message: Message, state: FSMContext):
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_profession = await db.get_user_profession(message.from_user.id)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user_id = await db.get_or_create_user(
        message.from_user.id,
        message.from_user.full_name or message.from_user.username or "Unknown"
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ —Å—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç–æ–π –∂–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
    if await db.check_order_number_exists(data["order_number"], user_profession):
        await message.answer(
            f"‚ö†Ô∏è <b>–ó–∞–∫–∞–∑ —Å –Ω–æ–º–µ—Ä–æ–º '{data['order_number']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å—Ä–µ–¥–∏ {user_profession}–æ–≤!</b>\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            parse_mode="HTML",
            reply_markup=get_order_exists_keyboard(data["order_number"])
        )
        return
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        profession = data.get("profession", "painter")
        status = "confirmed" if profession == "sandblaster" else "draft"
        
        order_id = await db.create_order(
            order_number=data["order_number"],
            user_id=user_id,
            set_type=data["set_type"],
            size=data.get("size"),
            alumochrome=data.get("alumochrome", False),
            price=data["price"],
            photo_file_id=data["photo_file_id"],
            suspensia_type=data.get("suspensia_type"),
            quantity=data.get("quantity", 1),
            spraying_deep=data.get("spraying_deep", 0),
            spraying_shallow=data.get("spraying_shallow", 0),
            status=status
        )
        
        # –ö—Ä–∞—Å–∏–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
        profession_emoji = "üé®" if data.get("profession") == "painter" else "üí®"
        profession_name = "–ú–∞–ª—è—Ä" if data.get("profession") == "painter" else "–ü–µ—Å–∫–æ—Å—Ç—Ä—É–π—â–∏–∫"
        logging.info(f"‚úÖ –ó–ê–ö–ê–ó –°–û–ó–î–ê–ù | ID: {order_id} | ‚Ññ{data['order_number']} | {profession_emoji} {profession_name} | {data['set_type']} {data.get('size', '')} | {data['price']}‚ÇΩ")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        order_data = {
            "order_number": data["order_number"],
            "profession": data.get("profession", "painter"),
            "set_type": data["set_type"],
            "size": data.get("size"),
            "alumochrome": data.get("alumochrome", False),
            "suspensia_type": data.get("suspensia_type"),
            "quantity": data.get("quantity", 1),
            "spraying_deep": data.get("spraying_deep", 0),
            "spraying_shallow": data.get("spraying_shallow", 0),
            "price": data["price"],
            "photo_file_id": data["photo_file_id"]
        }
        await send_admin_notification(message.bot, data["order_number"], order_data, message.from_user.username or message.from_user.full_name, order_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        set_type_text = get_set_type_text(data["set_type"], data)
        price = data["price"]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        profession = data.get("profession", "painter")
        if profession == "sandblaster":
            status_message = "‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
        else:
            status_message = "–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        
        text = (f"‚úÖ <b>–ó–∞–∫–∞–∑ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
                f"üìã <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {data['order_number']}\n"
                f"üîπ <b>–¢–∏–ø:</b> {set_type_text}\n"
                f"üí∞ <b>–¶–µ–Ω–∞:</b> {price:,} —Ä—É–±.\n\n"
                f"{status_message}")
        
        await message.answer(text, parse_mode="HTML", reply_markup=get_back_to_menu_keyboard())
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞!</b>\n\n"
            f"–ó–∞–∫–∞–∑ —Å –Ω–æ–º–µ—Ä–æ–º '{data['order_number']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.",
            parse_mode="HTML",
            reply_markup=get_back_to_menu_keyboard()
        )
        return
    
    await state.set_state(OrderStates.order_confirmed)

def get_set_type_text(set_type: str, data: dict) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–∞"""
    profession = data.get("profession", "painter")
    
    if set_type == "single":
        profession_text = "–æ–¥–∏–Ω –¥–∏—Å–∫"
    elif set_type == "set":
        profession_text = "–∫–æ–º–ø–ª–µ–∫—Ç"
    elif set_type == "nakidka":
        profession_text = "–Ω–∞—Å–∞–¥–∫–∏"
    elif set_type == "suspensia":
        if profession == "sandblaster":
            quantity = data.get("quantity", 1)
            profession_text = f"—Å—É–ø–æ—Ä—Ç–∞ ({quantity} —à—Ç.)"
        else:
            suspensia_type = data.get("suspensia_type")
            quantity = data.get("quantity", 1)
            if suspensia_type == "paint":
                profession_text = f"—Å—É–ø–æ—Ä—Ç–∞ –ø–æ–∫—Ä–∞—Å–∫–∞ ({quantity} —à—Ç.)"
            elif suspensia_type == "logo":
                profession_text = f"—Å—É–ø–æ—Ä—Ç–∞ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º ({quantity} —à—Ç.)"
            else:
                profession_text = f"—Å—É–ø–æ—Ä—Ç–∞ ({quantity} —à—Ç.)"
    elif set_type == "free":
        profession_text = "—Å–≤–æ–±–æ–¥–Ω—ã–π –∑–∞–∫–∞–∑"
    else:
        profession_text = set_type
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø—ã–ª–µ–Ω–∏–∏ –¥–ª—è –ø–µ—Å–∫–æ—Å—Ç—Ä—É–π—â–∏–∫–∞
    if profession == "sandblaster" and set_type in ["single", "set"]:
        spraying_deep = data.get("spraying_deep", 0)
        spraying_shallow = data.get("spraying_shallow", 0)
        if spraying_deep > 0 or spraying_shallow > 0:
            spraying_info = []
            if spraying_deep > 0:
                spraying_info.append(f"{spraying_deep} –≥–ª—É–±–æ–∫–∏—Ö")
            if spraying_shallow > 0:
                spraying_info.append(f"{spraying_shallow} –Ω–µ–≥–ª—É–±–æ–∫–∏—Ö")
            profession_text += f" (–Ω–∞–ø—ã–ª–µ–Ω–∏–µ: {', '.join(spraying_info)})"
    
    return profession_text

@router.callback_query(F.data.startswith("alumochrome_"), StateFilter(OrderStates.waiting_for_alumochrome))
async def process_alumochrome(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–ª—é–º–æ—Ö—Ä–æ–º–∞"""
    alumochrome = callback.data.split("_")[1] == "yes"
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    data = await state.get_data()
    profession = data.get("profession", "painter")
    set_type = data["set_type"]
    size = data["size"]
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏—Å–∫–æ–≤ (–¥–ª—è single —Ç–∏–ø–∞)
    quantity = data.get("disk_quantity", 1)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É
    price = calculate_price(profession, set_type, size, alumochrome, quantity=quantity)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    await state.update_data(alumochrome=alumochrome, price=price)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    await create_order_from_data(callback, state)

async def create_order_from_data(callback: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_profession = await db.get_user_profession(callback.from_user.id)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user_id = await db.get_or_create_user(
        callback.from_user.id,
        callback.from_user.full_name or callback.from_user.username or "Unknown"
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ —Å—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç–æ–π –∂–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
    if await db.check_order_number_exists(data["order_number"], user_profession):
        text = f"‚ö†Ô∏è <b>–ó–∞–∫–∞–∑ —Å –Ω–æ–º–µ—Ä–æ–º '{data['order_number']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å—Ä–µ–¥–∏ {user_profession}–æ–≤!</b>\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
        keyboard = get_order_exists_keyboard(data["order_number"])
        
        await safe_edit_message(callback, text, keyboard)
        await callback.answer("‚ùå –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        profession = data.get("profession", "painter")
        status = "confirmed" if profession == "sandblaster" else "draft"
        
        order_id = await db.create_order(
            order_number=data["order_number"],
            user_id=user_id,
            set_type=data["set_type"],
            size=data.get("size"),
            alumochrome=data.get("alumochrome", False),
            price=data["price"],
            photo_file_id=data["photo_file_id"],
            suspensia_type=data.get("suspensia_type"),
            quantity=data.get("quantity", 1),
            spraying_deep=data.get("spraying_deep", 0),
            spraying_shallow=data.get("spraying_shallow", 0),
            status=status
        )
        
        # –ö—Ä–∞—Å–∏–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
        profession_emoji = "üé®" if data.get("profession") == "painter" else "üí®"
        profession_name = "–ú–∞–ª—è—Ä" if data.get("profession") == "painter" else "–ü–µ—Å–∫–æ—Å—Ç—Ä—É–π—â–∏–∫"
        logging.info(f"‚úÖ –ó–ê–ö–ê–ó –°–û–ó–î–ê–ù | ID: {order_id} | ‚Ññ{data['order_number']} | {profession_emoji} {profession_name} | {data['set_type']} {data.get('size', '')} | {data['price']}‚ÇΩ")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        order_data = {
            "order_number": data["order_number"],
            "profession": data.get("profession", "painter"),
            "set_type": data["set_type"],
            "size": data.get("size"),
            "alumochrome": data.get("alumochrome", False),
            "suspensia_type": data.get("suspensia_type"),
            "quantity": data.get("quantity", 1),
            "spraying_deep": data.get("spraying_deep", 0),
            "spraying_shallow": data.get("spraying_shallow", 0),
            "price": data["price"],
            "photo_file_id": data["photo_file_id"]
        }
        await send_admin_notification(callback.bot, data["order_number"], order_data, callback.from_user.username or callback.from_user.full_name, order_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        set_type_text = get_set_type_text(data["set_type"], data)
        price = data["price"]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        profession = data.get("profession", "painter")
        if profession == "sandblaster":
            status_message = "‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
        else:
            status_message = "–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        
        text = (f"‚úÖ <b>–ó–∞–∫–∞–∑ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
                f"üìã <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {data['order_number']}\n"
                f"üîπ <b>–¢–∏–ø:</b> {set_type_text}\n"
                f"üí∞ <b>–¶–µ–Ω–∞:</b> {price:,} —Ä—É–±.\n\n"
                f"{status_message}")
        
        await safe_edit_message(callback, text, get_back_to_menu_keyboard())
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        text = (f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞!</b>\n\n"
                f"–ó–∞–∫–∞–∑ —Å –Ω–æ–º–µ—Ä–æ–º '{data['order_number']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.")
        
        await safe_edit_message(callback, text, get_back_to_menu_keyboard())
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    
    await state.set_state(OrderStates.order_confirmed)
    await callback.answer("‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω")

@router.callback_query(F.data.startswith("overwrite_order_"))
async def process_overwrite_order(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –∑–∞–∫–∞–∑–∞"""
    order_number = callback.data.split("_", 2)[2]  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_profession = await db.get_user_profession(callback.from_user.id)
    if not user_profession:
        await callback.answer("‚ùå –ü—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞", show_alert=True)
        return
    
    # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑ —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
    deleted = await db.delete_order_by_number_and_profession(order_number, user_profession)
    
    if deleted:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(order_number=order_number)
        
        text = (f"‚úÖ <b>–°—Ç–∞—Ä—ã–π –∑–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω!</b>\n\n"
                f"üìã <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {order_number}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–∫–∞–∑–∞:")
        keyboard = get_set_type_keyboard()
        
        await safe_edit_message(callback, text, keyboard)
        
        await state.set_state(OrderStates.waiting_for_set_type)
        await callback.answer("‚úÖ –°—Ç–∞—Ä—ã–π –∑–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ")
    else:
        text = "‚ùå <b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞!</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞."
        keyboard = get_cancel_keyboard()
        
        await safe_edit_message(callback, text, keyboard)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")

@router.callback_query(F.data == "change_order_number")
async def process_change_order_number(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞"""
    text = "üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b>"
    keyboard = get_cancel_keyboard()
    
    await safe_edit_message(callback, text, keyboard)
    
    await state.set_state(OrderStates.waiting_for_order_number)
    await callback.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞")

@router.callback_query(F.data == "cancel")
async def process_cancel(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞"""
    await state.clear()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_profession = await db.get_user_profession(callback.from_user.id)
    
    text = "‚ùå <b>–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    keyboard = get_main_menu_keyboard(user_profession)
    
    await safe_edit_message(callback, text, keyboard)
    await callback.answer()

async def send_admin_notification(bot, order_number: str, order_data: dict, username: str, order_id: int = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
    if not config.MODERATION_CHAT_ID:
        logging.warning("MODERATION_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return
    
    profession = order_data.get("profession", "painter")
    profession_text = "üé® –ú–∞–ª—è—Ä" if profession == "painter" else "üí® –ü–µ—Å–∫–æ—Å—Ç—Ä—É–π—â–∏–∫"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ç–∏–ø–∞ –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–ø—ã–ª–µ–Ω–∏–∏ (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
    set_type = order_data.get("set_type")
    if set_type == "single":
        set_type_text = "–æ–¥–∏–Ω –¥–∏—Å–∫"
    elif set_type == "set":
        set_type_text = "–∫–æ–º–ø–ª–µ–∫—Ç"
    elif set_type == "nakidka":
        set_type_text = "–Ω–∞—Å–∞–¥–∫–∏"
    elif set_type == "suspensia":
        if profession == "sandblaster":
            quantity = order_data.get("quantity", 1)
            set_type_text = f"—Å—É–ø–æ—Ä—Ç–∞ ({quantity} —à—Ç.)"
        else:
            suspensia_type = order_data.get("suspensia_type")
            quantity = order_data.get("quantity", 1)
            if suspensia_type == "paint":
                set_type_text = f"—Å—É–ø–æ—Ä—Ç–∞ –ø–æ–∫—Ä–∞—Å–∫–∞ ({quantity} —à—Ç.)"
            elif suspensia_type == "logo":
                set_type_text = f"—Å—É–ø–æ—Ä—Ç–∞ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º ({quantity} —à—Ç.)"
            else:
                set_type_text = f"—Å—É–ø–æ—Ä—Ç–∞ ({quantity} —à—Ç.)"
    elif set_type == "free":
        set_type_text = "—Å–≤–æ–±–æ–¥–Ω—ã–π –∑–∞–∫–∞–∑"
    else:
        set_type_text = set_type
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    if profession == "painter":
        executor_display = f"@{username}"
    else:
        executor_display = f"@{username}"
    
    text = (
        f"üÜï <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n\n"
        f"<b>{profession_text}:</b> {executor_display}\n"
        f"üìã <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {order_number}\n"
        f"üîπ <b>–¢–∏–ø:</b> {set_type_text}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {order_data.get('price', 0):,} —Ä—É–±."
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∏—Å–∫–æ–≤
    if order_data.get("set_type") in ["single", "set"]:
        size = order_data.get('size', '–ù–µ —É–∫–∞–∑–∞–Ω')
        text += f"\nüìè <b>–†–∞–∑–º–µ—Ä:</b> {size}"
        
        if profession == "painter":
            # –î–ª—è –º–∞–ª—è—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ª—é–º–æ—Ö—Ä–æ–º
            alumochrome_text = "–î–∞" if order_data.get("alumochrome", False) else "–ù–µ—Ç"
            text += f"\n‚ú® <b>–ê–ª—é–º–æ—Ö—Ä–æ–º:</b> {alumochrome_text}"
        else:
            # –î–ª—è –ø–µ—Å–∫–æ—Å—Ç—Ä—É–π—â–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–ø—ã–ª–µ–Ω–∏–µ
            spraying_deep = order_data.get("spraying_deep", 0)
            spraying_shallow = order_data.get("spraying_shallow", 0)
            if spraying_deep > 0 or spraying_shallow > 0:
                spraying_info = []
                if spraying_deep > 0:
                    spraying_info.append(f"{spraying_deep} –≥–ª—É–±–æ–∫–∏—Ö")
                if spraying_shallow > 0:
                    spraying_info.append(f"{spraying_shallow} –Ω–µ–≥–ª—É–±–æ–∫–∏—Ö")
                text += f"\nüí® <b>–ù–∞–ø—ã–ª–µ–Ω–∏–µ:</b> {', '.join(spraying_info)}"
    
    try:
        # –î–ª—è –ø–µ—Å–∫–æ—Å—Ç—Ä—É–π—â–∏–∫–∞ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ (–∑–∞–∫–∞–∑ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω)
        if profession == "sandblaster":
            await bot.send_photo(
                chat_id=config.MODERATION_CHAT_ID,
                photo=order_data["photo_file_id"],
                caption=text,
                parse_mode="HTML"
            )
        else:
            # –î–ª—è –º–∞–ª—è—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            from keyboards import get_admin_order_keyboard
            await bot.send_photo(
                chat_id=config.MODERATION_CHAT_ID,
                photo=order_data["photo_file_id"],
                caption=text,
                parse_mode="HTML",
                reply_markup=get_admin_order_keyboard(order_number, order_id)
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")


@router.message()
async def handle_any_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    if str(message.chat.id) == str(config.MODERATION_CHAT_ID):
        return
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ (–æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ edit_handlers.py)
    from handlers.fsm import EditOrderStates
    current_state = await state.get_state()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
    if (current_state == EditOrderStates.waiting_for_order_number or 
        current_state == EditOrderStates.waiting_for_new_price):
        # –≠—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ edit_handlers.py, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if current_state is None:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user_id = await db.get_or_create_user(
            message.from_user.id, 
            message.from_user.full_name or message.from_user.username or "Unknown"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_profession = await db.get_user_profession(message.from_user.id)
        
        if user_profession == "painter":
            text = "üé® <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –º–∞–ª—è—Ä–æ–≤!</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        else:
            text = "üí® <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–µ—Å–∫–æ—Å—Ç—Ä—É–π—â–∏–∫–æ–≤!</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        await message.answer(
            text,
            parse_mode="HTML",
            reply_markup=get_main_menu_keyboard(user_profession)
        )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=get_cancel_keyboard()
        )

@router.callback_query(F.data.startswith("price_list"))
async def show_price_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç"""
    from config import config
    from keyboards import get_back_to_menu_keyboard
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –ø–æ callback_data
    if callback.data == "price_list_painter":
        profession = "painter"
    elif callback.data == "price_list_sandblaster":
        profession = "sandblaster"
    else:
        # –ï—Å–ª–∏ callback_data –ø—Ä–æ—Å—Ç–æ "price_list", –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        profession = await db.get_user_profession(callback.from_user.id) or "painter"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–π—Å-–ª–∏—Å—Ç
    if profession == "painter":
        # –ü—Ä–∞–π—Å-–ª–∏—Å—Ç –¥–ª—è –º–∞–ª—è—Ä–∞
        text = "üí∞ <b>–ü—Ä–∞–π—Å-–ª–∏—Å—Ç –º–∞–ª—è—Ä–∞</b>\n\n"
        text += "üîπ <b>–û–¥–∏–Ω –¥–∏—Å–∫:</b>\n"
        text += f"R12: {config.PRICE_SINGLE_R12 + config.PRICE_PREP_SINGLE}‚ÇΩ\n"
        text += f"R13: {config.PRICE_SINGLE_R13 + config.PRICE_PREP_SINGLE}‚ÇΩ\n"
        text += f"R14: {config.PRICE_SINGLE_R14 + config.PRICE_PREP_SINGLE}‚ÇΩ\n"
        text += f"R15: {config.PRICE_SINGLE_R15 + config.PRICE_PREP_SINGLE}‚ÇΩ\n"
        text += f"R16: {config.PRICE_SINGLE_R16 + config.PRICE_PREP_SINGLE}‚ÇΩ\n"
        text += f"R17: {config.PRICE_SINGLE_R17 + config.PRICE_PREP_SINGLE}‚ÇΩ\n"
        text += f"R18: {config.PRICE_SINGLE_R18 + config.PRICE_PREP_SINGLE}‚ÇΩ\n"
        text += f"R19: {config.PRICE_SINGLE_R19 + config.PRICE_PREP_SINGLE}‚ÇΩ\n"
        text += f"R20: {config.PRICE_SINGLE_R20 + config.PRICE_PREP_SINGLE}‚ÇΩ\n"
        text += f"R21: {config.PRICE_SINGLE_R21 + config.PRICE_PREP_SINGLE}‚ÇΩ\n"
        text += f"R22: {config.PRICE_SINGLE_R22 + config.PRICE_PREP_SINGLE}‚ÇΩ\n"
        text += f"R23: {config.PRICE_SINGLE_R23 + config.PRICE_PREP_SINGLE}‚ÇΩ\n"
        text += f"R24: {config.PRICE_SINGLE_R24 + config.PRICE_PREP_SINGLE}‚ÇΩ\n\n"
        text += "üîπ <b>–ö–æ–º–ø–ª–µ–∫—Ç:</b>\n"
        text += f"R12: {config.PRICE_SET_R12 + config.PRICE_PREP_SET}‚ÇΩ\n"
        text += f"R13: {config.PRICE_SET_R13 + config.PRICE_PREP_SET}‚ÇΩ\n"
        text += f"R14: {config.PRICE_SET_R14 + config.PRICE_PREP_SET}‚ÇΩ\n"
        text += f"R15: {config.PRICE_SET_R15 + config.PRICE_PREP_SET}‚ÇΩ\n"
        text += f"R16: {config.PRICE_SET_R16 + config.PRICE_PREP_SET}‚ÇΩ\n"
        text += f"R17: {config.PRICE_SET_R17 + config.PRICE_PREP_SET}‚ÇΩ\n"
        text += f"R18: {config.PRICE_SET_R18 + config.PRICE_PREP_SET}‚ÇΩ\n"
        text += f"R19: {config.PRICE_SET_R19 + config.PRICE_PREP_SET}‚ÇΩ\n"
        text += f"R20: {config.PRICE_SET_R20 + config.PRICE_PREP_SET}‚ÇΩ\n"
        text += f"R21: {config.PRICE_SET_R21 + config.PRICE_PREP_SET}‚ÇΩ\n"
        text += f"R22: {config.PRICE_SET_R22 + config.PRICE_PREP_SET}‚ÇΩ\n"
        text += f"R23: {config.PRICE_SET_R23 + config.PRICE_PREP_SET}‚ÇΩ\n"
        text += f"R24: {config.PRICE_SET_R24 + config.PRICE_PREP_SET}‚ÇΩ\n\n"
        text += "üî∏ <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>\n"
        text += f"–ù–∞—Å–∞–¥–∫–∏: {config.PRICE_NAKIDKA}‚ÇΩ\n"
        text += f"–°—É–ø–æ—Ä—Ç–∞ –ø–æ–∫—Ä–∞—Å–∫–∞: {config.PRICE_SUSPENSIA_PAINT}‚ÇΩ\n"
        text += f"–°—É–ø–æ—Ä—Ç–∞ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º: {config.PRICE_SUSPENSIA_LOGO}‚ÇΩ\n\n"
        text += "‚ú® –ê–ª—é–º–æ—Ö—Ä–æ–º: +{0}‚ÇΩ".format(config.PRICE_ALUMOCHROME_EXTRA)
    else:
        # –ü—Ä–∞–π—Å-–ª–∏—Å—Ç –¥–ª—è –ø–µ—Å–∫–æ—Å—Ç—Ä—É–π—â–∏–∫–∞
        text = "üí∞ <b>–ü—Ä–∞–π—Å-–ª–∏—Å—Ç –ø–µ—Å–∫–æ—Å—Ç—Ä—É–π—â–∏–∫–∞</b>\n\n"
        text += "üîπ <b>–û–¥–∏–Ω –¥–∏—Å–∫:</b>\n"
        text += f"R12: {config.PRICE_SANDBLASTER_SINGLE_R12}‚ÇΩ\n"
        text += f"R13: {config.PRICE_SANDBLASTER_SINGLE_R13}‚ÇΩ\n"
        text += f"R14: {config.PRICE_SANDBLASTER_SINGLE_R14}‚ÇΩ\n"
        text += f"R15: {config.PRICE_SANDBLASTER_SINGLE_R15}‚ÇΩ\n"
        text += f"R16: {config.PRICE_SANDBLASTER_SINGLE_R16}‚ÇΩ\n"
        text += f"R17: {config.PRICE_SANDBLASTER_SINGLE_R17}‚ÇΩ\n"
        text += f"R18: {config.PRICE_SANDBLASTER_SINGLE_R18}‚ÇΩ\n"
        text += f"R19: {config.PRICE_SANDBLASTER_SINGLE_R19}‚ÇΩ\n"
        text += f"R20: {config.PRICE_SANDBLASTER_SINGLE_R20}‚ÇΩ\n"
        text += f"R21: {config.PRICE_SANDBLASTER_SINGLE_R21}‚ÇΩ\n"
        text += f"R22: {config.PRICE_SANDBLASTER_SINGLE_R22}‚ÇΩ\n"
        text += f"R23: {config.PRICE_SANDBLASTER_SINGLE_R23}‚ÇΩ\n"
        text += f"R24: {config.PRICE_SANDBLASTER_SINGLE_R24}‚ÇΩ\n\n"
        text += "üîπ <b>–ö–æ–º–ø–ª–µ–∫—Ç:</b>\n"
        text += f"R12: {config.PRICE_SANDBLASTER_SET_R12}‚ÇΩ\n"
        text += f"R13: {config.PRICE_SANDBLASTER_SET_R13}‚ÇΩ\n"
        text += f"R14: {config.PRICE_SANDBLASTER_SET_R14}‚ÇΩ\n"
        text += f"R15: {config.PRICE_SANDBLASTER_SET_R15}‚ÇΩ\n"
        text += f"R16: {config.PRICE_SANDBLASTER_SET_R16}‚ÇΩ\n"
        text += f"R17: {config.PRICE_SANDBLASTER_SET_R17}‚ÇΩ\n"
        text += f"R18: {config.PRICE_SANDBLASTER_SET_R18}‚ÇΩ\n"
        text += f"R19: {config.PRICE_SANDBLASTER_SET_R19}‚ÇΩ\n"
        text += f"R20: {config.PRICE_SANDBLASTER_SET_R20}‚ÇΩ\n"
        text += f"R21: {config.PRICE_SANDBLASTER_SET_R21}‚ÇΩ\n"
        text += f"R22: {config.PRICE_SANDBLASTER_SET_R22}‚ÇΩ\n"
        text += f"R23: {config.PRICE_SANDBLASTER_SET_R23}‚ÇΩ\n"
        text += f"R24: {config.PRICE_SANDBLASTER_SET_R24}‚ÇΩ\n\n"
        text += "üî∏ <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>\n"
        text += f"–ù–∞—Å–∞–¥–∫–∏: {config.PRICE_SANDBLASTER_NAKIDKA}‚ÇΩ\n"
        text += f"–°—É–ø–æ—Ä—Ç–∞: {config.PRICE_SANDBLASTER_SUSPENSIA}‚ÇΩ\n\n"
        text += "üí® <b>–ù–∞–ø—ã–ª–µ–Ω–∏–µ:</b>\n"
        text += f"–ì–ª—É–±–æ–∫–æ–µ: +{config.PRICE_SPRAYING_DEEP}‚ÇΩ\n"
        text += f"–ù–µ–≥–ª—É–±–æ–∫–æ–µ: +{config.PRICE_SPRAYING_SHALLOW}‚ÇΩ"
    
    keyboard = get_back_to_menu_keyboard()
    await safe_edit_message(callback, text, keyboard)
    await callback.answer()
