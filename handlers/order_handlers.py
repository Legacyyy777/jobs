import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, PhotoSize
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state

from handlers.fsm import OrderStates
from keyboards import (
    get_main_menu_keyboard,
    get_set_type_keyboard, 
    get_size_keyboard, 
    get_alumochrome_keyboard,
    get_cancel_keyboard,
    get_back_to_menu_keyboard
)
from config import config
from db import db

router = Router()

def calculate_price(set_type: str, size: str, alumochrome: bool) -> int:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–Ω—É –∑–∞–∫–∞–∑–∞"""
    base_price = 0
    
    # –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏ —Ä–∞–∑–º–µ—Ä–∞
    if set_type == "single":
        if size == "R15":
            base_price = config.PRICE_SINGLE_R15
        elif size == "R16":
            base_price = config.PRICE_SINGLE_R16
        elif size == "R17":
            base_price = config.PRICE_SINGLE_R17
        elif size == "R18":
            base_price = config.PRICE_SINGLE_R16 + 100  # R18 = R16 + 100
        elif size == "R19":
            base_price = config.PRICE_SINGLE_R17 + 100  # R19 = R17 + 100
        elif size == "R20":
            base_price = config.PRICE_SINGLE_R17 + 200  # R20 = R17 + 200
    else:  # set
        if size == "R15":
            base_price = config.PRICE_SET_R15
        elif size == "R16":
            base_price = config.PRICE_SET_R16
        elif size == "R17":
            base_price = config.PRICE_SET_R17
        elif size == "R18":
            base_price = config.PRICE_SET_R16 + 200  # R18 = R16 + 200
        elif size == "R19":
            base_price = config.PRICE_SET_R17 + 200  # R19 = R17 + 200
        elif size == "R20":
            base_price = config.PRICE_SET_R17 + 400  # R20 = R17 + 400
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–ª–∞—Ç—É –∑–∞ –∞–ª—é–º–æ—Ö—Ä–æ–º
    if alumochrome:
        base_price += config.PRICE_ALUMOCHROME_EXTRA
    
    return base_price

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user_id = await db.get_or_create_user(
        message.from_user.id, 
        message.from_user.full_name or message.from_user.username or "Unknown"
    )
    
    await message.answer(
        "üé® <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –º–∞–ª—è—Ä–æ–≤!</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=get_main_menu_keyboard()
    )

@router.callback_query(F.data == "main_menu")
async def show_main_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    
    await callback.message.edit_text(
        "üé® <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "create_order")
async def start_create_order(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    await callback.message.edit_text(
        "üì∏ <b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–∏—Å–∫–∞(–æ–≤), –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–æ–∫—Ä–∞—Å–∏—Ç—å:",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()
    )
    
    await state.set_state(OrderStates.waiting_for_photo)
    await callback.answer()

@router.callback_query(F.data == "earnings_day")
async def show_earnings_day(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    user_id = await db.get_or_create_user(
        callback.from_user.id, 
        callback.from_user.full_name or callback.from_user.username or "Unknown"
    )
    
    earnings = await db.get_user_earnings_today(user_id)
    
    await callback.message.edit_text(
        f"üí∞ <b>–ó–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b> {earnings:,} —Ä—É–±.",
        parse_mode="HTML",
        reply_markup=get_back_to_menu_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "earnings_month")
async def show_earnings_month(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ –º–µ—Å—è—Ü"""
    user_id = await db.get_or_create_user(
        callback.from_user.id, 
        callback.from_user.full_name or callback.from_user.username or "Unknown"
    )
    
    earnings = await db.get_user_earnings_month(user_id)
    
    await callback.message.edit_text(
        f"üí∞ <b>–ó–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:</b> {earnings:,} —Ä—É–±.",
        parse_mode="HTML",
        reply_markup=get_back_to_menu_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "help")
async def show_help(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    help_text = (
        "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
        "üé® <b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:</b>\n"
        "1. –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑'\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–∏—Å–∫–∞(–æ–≤)\n"
        "3. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞\n"
        "4. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø (–æ–¥–∏–Ω –¥–∏—Å–∫/–∫–æ–º–ø–ª–µ–∫—Ç)\n"
        "5. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –¥–∏—Å–∫–∞\n"
        "6. –£–∫–∞–∂–∏—Ç–µ –Ω—É–∂–µ–Ω –ª–∏ –∞–ª—é–º–æ—Ö—Ä–æ–º\n\n"
        "üí∞ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        "‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ –¥–µ–Ω—å - —Å—É–º–º–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ –º–µ—Å—è—Ü - —Å—É–º–º–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü\n\n"
        "üìã <b>–°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤:</b>\n"
        "‚Ä¢ –ß–µ—Ä–Ω–æ–≤–∏–∫ - –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
        "‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω - –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç, —Å—É–º–º–∞ –∑–∞—Å—á–∏—Ç–∞–Ω–∞\n"
        "‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω - –∑–∞–∫–∞–∑ –Ω–µ –ø—Ä–∏–Ω—è—Ç\n\n"
        "‚ùì <b>–ü—Ä–æ–±–ª–µ–º—ã?</b>\n"
        "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
    )
    
    await callback.message.edit_text(
        help_text,
        parse_mode="HTML",
        reply_markup=get_back_to_menu_keyboard()
    )
    await callback.answer()

@router.message(StateFilter(OrderStates.waiting_for_photo), F.photo)
async def process_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–æ—Ç–æ
    photo = max(message.photo, key=lambda x: x.file_size)
    
    await state.update_data(photo_file_id=photo.file_id)
    
    await message.answer(
        "üì∏ <b>–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()
    )
    
    await state.set_state(OrderStates.waiting_for_order_number)

@router.message(StateFilter(OrderStates.waiting_for_photo))
async def process_non_photo(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ-—Ñ–æ—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ"""
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–∏—Å–∫–∞(–æ–≤) –¥–ª—è –ø–æ–∫—Ä–∞—Å–∫–∏.",
        reply_markup=get_cancel_keyboard()
    )

@router.message()
async def handle_any_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    current_state = await state.get_state()
    if current_state is None:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user_id = await db.get_or_create_user(
            message.from_user.id, 
            message.from_user.full_name or message.from_user.username or "Unknown"
        )
        
        await message.answer(
            "üé® <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –º–∞–ª—è—Ä–æ–≤!</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="HTML",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=get_cancel_keyboard()
        )

@router.message(StateFilter(OrderStates.waiting_for_order_number))
async def process_order_number(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞"""
    order_number = message.text.strip()
    
    if not order_number:
        await message.answer("‚ùå –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(order_number=order_number)
    
    await message.answer(
        "üìã <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–∫–∞–∑–∞:".format(order_number),
        parse_mode="HTML",
        reply_markup=get_set_type_keyboard()
    )
    
    await state.set_state(OrderStates.waiting_for_set_type)

@router.callback_query(F.data.startswith("set_type_"), StateFilter(OrderStates.waiting_for_set_type))
async def process_set_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–∞"""
    set_type = callback.data.split("_")[2]  # single –∏–ª–∏ set
    
    await state.update_data(set_type=set_type)
    
    set_type_text = "–æ–¥–∏–Ω –¥–∏—Å–∫" if set_type == "single" else "–∫–æ–º–ø–ª–µ–∫—Ç"
    
    await callback.message.edit_text(
        f"üìã <b>–¢–∏–ø –∑–∞–∫–∞–∑–∞:</b> {set_type_text}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –¥–∏—Å–∫–∞:",
        parse_mode="HTML",
        reply_markup=get_size_keyboard()
    )
    
    await state.set_state(OrderStates.waiting_for_size)

@router.callback_query(F.data.startswith("size_"), StateFilter(OrderStates.waiting_for_size))
async def process_size(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –¥–∏—Å–∫–∞"""
    size = callback.data.split("_")[1]  # R15, R16, etc.
    
    await state.update_data(size=size)
    
    await callback.message.edit_text(
        f"üìè <b>–†–∞–∑–º–µ—Ä –¥–∏—Å–∫–∞:</b> {size}\n\n"
        "–ù—É–∂–µ–Ω –ª–∏ –∞–ª—é–º–æ—Ö—Ä–æ–º?",
        parse_mode="HTML",
        reply_markup=get_alumochrome_keyboard()
    )
    
    await state.set_state(OrderStates.waiting_for_alumochrome)

@router.callback_query(F.data.startswith("alumochrome_"), StateFilter(OrderStates.waiting_for_alumochrome))
async def process_alumochrome(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–ª—é–º–æ—Ö—Ä–æ–º–∞"""
    alumochrome = callback.data.split("_")[1] == "yes"
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    data = await state.get_data()
    set_type = data["set_type"]
    size = data["size"]
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É
    price = calculate_price(set_type, size, alumochrome)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    await state.update_data(alumochrome=alumochrome, price=price)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    set_type_text = "–æ–¥–∏–Ω –¥–∏—Å–∫" if set_type == "single" else "–∫–æ–º–ø–ª–µ–∫—Ç"
    alumochrome_text = "–î–∞" if alumochrome else "–ù–µ—Ç"
    
    await callback.message.edit_text(
        f"‚úÖ <b>–ó–∞–∫–∞–∑ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
        f"üìã <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {data['order_number']}\n"
        f"üîπ <b>–¢–∏–ø:</b> {set_type_text}\n"
        f"üìè <b>–†–∞–∑–º–µ—Ä:</b> {size}\n"
        f"‚ú® <b>–ê–ª—é–º–æ—Ö—Ä–æ–º:</b> {alumochrome_text}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {price:,} —Ä—É–±.\n\n"
        f"–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        parse_mode="HTML",
        reply_markup=get_back_to_menu_keyboard()
    )
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user_id = await db.get_or_create_user(
        callback.from_user.id,
        callback.from_user.full_name or callback.from_user.username or "Unknown"
    )
    
    order_id = await db.create_order(
        order_number=data["order_number"],
        user_id=user_id,
        set_type=set_type,
        size=size,
        alumochrome=alumochrome,
        price=price,
        photo_file_id=data["photo_file_id"]
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await send_admin_notification(callback.bot, order_id, data, callback.from_user.username or callback.from_user.full_name)
    
    await state.set_state(OrderStates.order_confirmed)

@router.callback_query(F.data == "cancel")
async def process_cancel(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå <b>–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer()

async def send_admin_notification(bot, order_id: int, order_data: dict, username: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
    if not config.MODERATION_CHAT_ID:
        logging.warning("MODERATION_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return
    
    set_type_text = "–æ–¥–∏–Ω –¥–∏—Å–∫" if order_data["set_type"] == "single" else "–∫–æ–º–ø–ª–µ–∫—Ç"
    alumochrome_text = "–î–∞" if order_data["alumochrome"] else "–ù–µ—Ç"
    
    text = (
        f"üÜï <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}</b>\n\n"
        f"üë§ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> @{username}\n"
        f"üìã <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {order_data['order_number']}\n"
        f"üîπ <b>–¢–∏–ø:</b> {set_type_text}\n"
        f"üìè <b>–†–∞–∑–º–µ—Ä:</b> {order_data['size']}\n"
        f"‚ú® <b>–ê–ª—é–º–æ—Ö—Ä–æ–º:</b> {alumochrome_text}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {order_data['price']:,} —Ä—É–±."
    )
    
    try:
        from keyboards import get_admin_order_keyboard
        await bot.send_photo(
            chat_id=config.MODERATION_CHAT_ID,
            photo=order_data["photo_file_id"],
            caption=text,
            parse_mode="HTML",
            reply_markup=get_admin_order_keyboard(order_id)
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
