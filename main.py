import asyncio
import logging
import signal
import sys
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage

from config import config
from db import db
from handlers import order_handlers, admin_handlers, edit_handlers
from middleware import DatabaseMiddleware, AccessMiddleware, set_database_available, is_database_available

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ middleware –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ë–î

async def check_unconfirmed_orders_task(bot):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    while True:
        try:
            await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            
            if not is_database_available():
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å—Ç–∞—Ä—à–µ 30 –º–∏–Ω—É—Ç –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            unconfirmed_orders = await db.get_unconfirmed_orders_older_than(30)
            
            for order in unconfirmed_orders:
                try:
                    profession_text = "üé® –ú–∞–ª—è—Ä" if order.get('profession') == 'painter' else "üí® –ü–µ—Å–∫–æ—Å—Ç—Ä—É–π—â–∏–∫"
                    
                    # –ü–æ–ª—É—á–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    try:
                        user_info = await bot.get_chat(order["tg_id"])
                        username = user_info.username if user_info.username else order['user_name']
                    except Exception:
                        username = order['user_name']
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —á–∞—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏
                    reminder_text = (
                        f"‚è∞ <b>–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï</b>\n\n"
                        f"–ó–∞–∫–∞–∑ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç!\n"
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑."
                    )
                    
                    if config.MODERATION_CHAT_ID:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
                        reminder_msg = await bot.send_message(
                            chat_id=config.MODERATION_CHAT_ID,
                            text=reminder_text,
                            parse_mode="HTML"
                        )
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –≤ –±–∞–∑–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                        await db.save_reminder_message_id(order['id'], reminder_msg.message_id)
                        
                        # –ü–æ–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ –∫–∞–∫ –Ω–∞–ø–æ–º–Ω–µ–Ω–Ω—ã–π
                        await db.mark_order_as_reminded(order['id'])
                        
                        logger.info(f"‚è∞ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ #{order['order_number']} ({profession_text})")
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ {order.get('id')}: {e}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {e}")
            await asyncio.sleep(60)

async def health_check_task():
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    while True:
        try:
            await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            if not await db.health_check():
                logger.warning("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
                try:
                    await db.reconnect()
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    if await db.health_check():
                        set_database_available(True)
                        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                    else:
                        set_database_available(False)
                        logger.warning("‚ö†Ô∏è –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –Ω–æ health check –Ω–µ –ø—Ä–æ—à–µ–ª")
                except Exception as reconnect_error:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î: {reconnect_error}")
                    set_database_available(False)
                    # –ï—Å–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                    if "–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" in str(reconnect_error) or "does not exist" in str(reconnect_error):
                        logger.error("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ.")
                        await asyncio.sleep(600)  # –ñ–¥–µ–º 10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
            else:
                if not is_database_available():
                    set_database_available(True)
                    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ health check: {e}")
            set_database_available(False)
            await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ

async def graceful_shutdown(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
    logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
    await db.close_pool()
    sys.exit(0)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    signal.signal(signal.SIGINT, lambda s, f: asyncio.create_task(graceful_shutdown(s, f)))
    signal.signal(signal.SIGTERM, lambda s, f: asyncio.create_task(graceful_shutdown(s, f)))
    
    # –ö—Ä–∞—Å–∏–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    logger.info("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    logger.info("‚ïë                          üîß –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø üîß                              ‚ïë")
    logger.info("‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£")
    logger.info(f"‚ïë ü§ñ –¢–æ–∫–µ–Ω –±–æ—Ç–∞: {'‚úÖ –ù–ê–°–¢–†–û–ï–ù' if config.BOT_TOKEN else '‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢'}                                                      ‚ïë")
    logger.info(f"‚ïë üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: PostgreSQL                                                      ‚ïë")
    logger.info(f"‚ïë üìä –û–±—Ä–∞–∑–µ—Ü —Ü–µ–Ω: R15 –æ–¥–∏–Ω–æ—á–Ω—ã–π: {config.PRICE_SINGLE_R15}‚ÇΩ, –∫–æ–º–ø–ª–µ–∫—Ç: {config.PRICE_SET_R15}‚ÇΩ                        ‚ïë")
    logger.info(f"‚ïë üõ†Ô∏è  –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –¥–∏—Å–∫–∞: {config.PRICE_PREP_SINGLE}‚ÇΩ                                                ‚ïë")
    logger.info("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if not config.BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    bot = Bot(token=config.BOT_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())
    
    # –î–æ–±–∞–≤–ª—è–µ–º middleware: –¥–æ—Å—Ç—É–ø –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
    dp.message.middleware(AccessMiddleware())
    dp.callback_query.middleware(AccessMiddleware())
    dp.message.middleware(DatabaseMiddleware())
    dp.callback_query.middleware(DatabaseMiddleware())
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã (–ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω!)
    # edit_handlers –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–∞
    dp.include_router(edit_handlers.router)
    dp.include_router(admin_handlers.router)
    dp.include_router(order_handlers.router)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—É—é
    set_database_available(False)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        logger.info("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        max_retries = 5
        retry_delay = 5
        
        for attempt in range(max_retries):
            try:
                await db.create_pool()
                await db.init_tables()
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                if await db.health_check():
                    set_database_available(True)
                    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                    break
                else:
                    raise Exception("Health check –Ω–µ –ø—Ä–æ—à–µ–ª –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
            except Exception as db_error:
                logger.warning(f"‚ö†Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –Ω–µ—É–¥–∞—á–Ω–∞: {db_error}")
                
                # –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ë–î, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                if "–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" in str(db_error) or "does not exist" in str(db_error):
                    retry_delay = 10  # –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ë–î
                    logger.info("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è...")
                
                if attempt < max_retries - 1:
                    logger.info(f"‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(retry_delay)
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
                    logger.warning("‚ö†Ô∏è –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                    logger.info("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: docker-compose restart")
                    set_database_available(False)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        health_task = asyncio.create_task(health_check_task())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        reminder_task = asyncio.create_task(check_unconfirmed_orders_task(bot))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if 'health_task' in locals():
            health_task.cancel()
        if 'reminder_task' in locals():
            reminder_task.cancel()
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        logger.info("üîå –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
        await db.close_pool()
        await bot.session.close()
        logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã")

if __name__ == "__main__":
    asyncio.run(main())
